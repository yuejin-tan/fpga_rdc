
adc_st.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001890  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  20000000  00001890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f8  20000024  000018b4  00020024  2**2
                  ALLOC
  3 .heap         00000200  20000120  20000120  00020028  2**3
                  CONTENTS, READONLY
  4 .stack_dummy  00000800  20000120  20000120  00020228  2**3
                  CONTENTS, READONLY
  5 .ARM.attributes 00000029  00000000  00000000  00020a28  2**0
                  CONTENTS, READONLY
  6 .comment      00000043  00000000  00000000  00020a51  2**0
                  CONTENTS, READONLY
  7 .debug_info   000044cb  00000000  00000000  00020a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001152  00000000  00000000  00024f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loclists 000011ee  00000000  00000000  000260b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000510  00000000  00000000  000272a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 000004c4  00000000  00000000  000277b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00001bc8  00000000  00000000  00027c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000053d6  00000000  00000000  0002983c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0000e595  00000000  00000000  0002ec12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00000c30  00000000  00000000  0003d1a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 0000003f  00000000  00000000  0003ddd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__isr_vector>:
  * @return none
  * @brief Outputs the specified value on the desired port using the user defined mask to perform Masked access.
  */
void GPIO_MaskedWrite(GPIO_TypeDef* GPIOx,uint32_t value,uint32_t mask)
{
  GPIOx->MASKLOWBYTE[0x00FF & mask] = value;
       0:	20004000 	.word	0x20004000
  GPIOx->MASKHIGHBYTE[((0xFF00 & mask) >> 8)] = value;
       4:	00000f75 	.word	0x00000f75
  GPIOx->MASKLOWBYTE[0x00FF & mask] = value;
       8:	000002b7 	.word	0x000002b7
  GPIOx->MASKHIGHBYTE[((0xFF00 & mask) >> 8)] = value;
       c:	000002b9 	.word	0x000002b9
  GPIOx->MASKLOWBYTE[0x00FF & mask] = value;
      10:	000002bb 	.word	0x000002bb
  GPIOx->MASKHIGHBYTE[((0xFF00 & mask) >> 8)] = value;
      14:	000002bd 	.word	0x000002bd
  */
void SPI_SetClkSel(uint32_t clksel)
{
  SPI->CTRL &= ~SPI_CR_CLKSEL;
  SPI->CTRL |= ((clksel&SPI_CR_CLKSEL_Mask)<<SPI_CR_CLKSEL_Pos);
}
      18:	000002bf 	.word	0x000002bf
	...
      2c:	000002c1 	.word	0x000002c1
      30:	000002c3 	.word	0x000002c3
      34:	00000000 	.word	0x00000000
      38:	000002c5 	.word	0x000002c5
      3c:	000002c9 	.word	0x000002c9
      40:	0000037d 	.word	0x0000037d
      44:	00000371 	.word	0x00000371
      48:	000003a5 	.word	0x000003a5
      4c:	00000373 	.word	0x00000373
      50:	00000375 	.word	0x00000375
      54:	000003ad 	.word	0x000003ad
      58:	00000fc3 	.word	0x00000fc3
      5c:	00000377 	.word	0x00000377
      60:	000003a7 	.word	0x000003a7
      64:	000003a9 	.word	0x000003a9
      68:	00000000 	.word	0x00000000
      6c:	000003ab 	.word	0x000003ab
      70:	00000fcd 	.word	0x00000fcd
      74:	00000379 	.word	0x00000379
      78:	0000037b 	.word	0x0000037b
      7c:	00000fd3 	.word	0x00000fd3
      80:	000003af 	.word	0x000003af
      84:	000003b1 	.word	0x000003b1
      88:	000003b3 	.word	0x000003b3
      8c:	000003b5 	.word	0x000003b5
      90:	000003b7 	.word	0x000003b7
      94:	000003b9 	.word	0x000003b9
      98:	000003bb 	.word	0x000003bb
      9c:	000003bd 	.word	0x000003bd
      a0:	000003bf 	.word	0x000003bf
      a4:	000003c1 	.word	0x000003c1
      a8:	000003c3 	.word	0x000003c3
      ac:	000003c5 	.word	0x000003c5
      b0:	000003c7 	.word	0x000003c7
      b4:	000003c9 	.word	0x000003c9
      b8:	000003cb 	.word	0x000003cb
      bc:	000003cd 	.word	0x000003cd

000000c0 <GPIO_Init>:
  GPIOx->DATA = 0;
      c0:	2300      	movs	r3, #0
{
      c2:	b570      	push	{r4, r5, r6, lr}
   GPIOx->MASKLOWBYTE[pos] = 0;
      c4:	461e      	mov	r6, r3
  uint32_t GPIO_Pin = GPIO_InitStruct->GPIO_Pin;
      c6:	680a      	ldr	r2, [r1, #0]
  GPIOMode_TypeDef GPIO_Mode = GPIO_InitStruct->GPIO_Mode;
      c8:	790c      	ldrb	r4, [r1, #4]
  GPIOInt_TypeDef GPIO_Int = GPIO_InitStruct->GPIO_Int;
      ca:	7949      	ldrb	r1, [r1, #5]
  GPIOx->DATA = 0;
      cc:	6003      	str	r3, [r0, #0]
  GPIOx->DATAOUT = 0;
      ce:	6043      	str	r3, [r0, #4]
  GPIOx->OUTENSET = 0;
      d0:	6103      	str	r3, [r0, #16]
  GPIOx->OUTENCLR = 0;
      d2:	6143      	str	r3, [r0, #20]
  GPIOx->ALTFUNCSET = 0;
      d4:	6183      	str	r3, [r0, #24]
  GPIOx->ALTFUNCCLR = 0;
      d6:	61c3      	str	r3, [r0, #28]
  GPIOx->INTENSET = 0;
      d8:	6203      	str	r3, [r0, #32]
  GPIOx->INTENCLR = 0;
      da:	6243      	str	r3, [r0, #36]	; 0x24
  GPIOx->INTTYPESET = 0;
      dc:	6283      	str	r3, [r0, #40]	; 0x28
  GPIOx->INTTYPECLR = 0;
      de:	62c3      	str	r3, [r0, #44]	; 0x2c
  GPIOx->INTPOLSET = 0;
      e0:	6303      	str	r3, [r0, #48]	; 0x30
  GPIOx->INTPOLCLR = 0;
      e2:	6343      	str	r3, [r0, #52]	; 0x34
  GPIOx->INTCLEAR = 0;
      e4:	6383      	str	r3, [r0, #56]	; 0x38
   GPIOx->MASKLOWBYTE[pos] = 0;
      e6:	eb00 0583 	add.w	r5, r0, r3, lsl #2
  for(pos = 0;pos < 256;pos++)
      ea:	3301      	adds	r3, #1
      ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   GPIOx->MASKLOWBYTE[pos] = 0;
      f0:	f8c5 6400 	str.w	r6, [r5, #1024]	; 0x400
   GPIOx->MASKHIGHBYTE[pos] = 0;
      f4:	f8c5 6800 	str.w	r6, [r5, #2048]	; 0x800
  for(pos = 0;pos < 256;pos++)
      f8:	d1f5      	bne.n	e6 <GPIO_Init+0x26>
  if(GPIO_Mode == GPIO_Mode_IN)
      fa:	b97c      	cbnz	r4, 11c <GPIO_Init+0x5c>
    GPIOx->OUTENSET &= (~GPIO_Pin);//Clear Out Enable
      fc:	6903      	ldr	r3, [r0, #16]
      fe:	ea23 0302 	bic.w	r3, r3, r2
    GPIOx->OUTENSET |= GPIO_Pin;//Set Out Enable
     102:	6103      	str	r3, [r0, #16]
  if(GPIO_Int == GPIO_Int_Low_Level)
     104:	2901      	cmp	r1, #1
     106:	d114      	bne.n	132 <GPIO_Init+0x72>
    GPIOx->INTENSET |= GPIO_Pin;
     108:	6a03      	ldr	r3, [r0, #32]
     10a:	4313      	orrs	r3, r2
     10c:	6203      	str	r3, [r0, #32]
    GPIOx->INTTYPECLR |= GPIO_Pin;
     10e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     110:	4313      	orrs	r3, r2
     112:	62c3      	str	r3, [r0, #44]	; 0x2c
    GPIOx->INTPOLCLR |= GPIO_Pin;
     114:	6b43      	ldr	r3, [r0, #52]	; 0x34
     116:	4313      	orrs	r3, r2
     118:	6343      	str	r3, [r0, #52]	; 0x34
     11a:	e015      	b.n	148 <GPIO_Init+0x88>
  else if(GPIO_Mode == GPIO_Mode_OUT)
     11c:	2c01      	cmp	r4, #1
     11e:	d102      	bne.n	126 <GPIO_Init+0x66>
    GPIOx->OUTENSET |= GPIO_Pin;//Set Out Enable
     120:	6903      	ldr	r3, [r0, #16]
     122:	4313      	orrs	r3, r2
     124:	e7ed      	b.n	102 <GPIO_Init+0x42>
  else if(GPIO_Mode == GPIO_Mode_AF)
     126:	2c02      	cmp	r4, #2
    GPIOx->ALTFUNCSET |= GPIO_Pin;
     128:	bf02      	ittt	eq
     12a:	6983      	ldreq	r3, [r0, #24]
     12c:	4313      	orreq	r3, r2
     12e:	6183      	streq	r3, [r0, #24]
     130:	e7e8      	b.n	104 <GPIO_Init+0x44>
  else if(GPIO_Int == GPIO_Int_High_Level)
     132:	2902      	cmp	r1, #2
     134:	d109      	bne.n	14a <GPIO_Init+0x8a>
    GPIOx->INTENSET |= GPIO_Pin;
     136:	6a03      	ldr	r3, [r0, #32]
     138:	4313      	orrs	r3, r2
     13a:	6203      	str	r3, [r0, #32]
    GPIOx->INTTYPECLR |= GPIO_Pin;
     13c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     13e:	4313      	orrs	r3, r2
     140:	62c3      	str	r3, [r0, #44]	; 0x2c
    GPIOx->INTPOLSET |= GPIO_Pin;
     142:	6b03      	ldr	r3, [r0, #48]	; 0x30
     144:	4313      	orrs	r3, r2
     146:	6303      	str	r3, [r0, #48]	; 0x30
}
     148:	bd70      	pop	{r4, r5, r6, pc}
  else if(GPIO_Int == GPIO_Int_Falling_Edge)
     14a:	2903      	cmp	r1, #3
     14c:	d106      	bne.n	15c <GPIO_Init+0x9c>
    GPIOx->INTENSET |= GPIO_Pin;
     14e:	6a03      	ldr	r3, [r0, #32]
     150:	4313      	orrs	r3, r2
     152:	6203      	str	r3, [r0, #32]
    GPIOx->INTTYPESET |= GPIO_Pin;
     154:	6a83      	ldr	r3, [r0, #40]	; 0x28
     156:	4313      	orrs	r3, r2
     158:	6283      	str	r3, [r0, #40]	; 0x28
     15a:	e7db      	b.n	114 <GPIO_Init+0x54>
  else if(GPIO_Int == GPIO_Int_Rising_Edge)
     15c:	2904      	cmp	r1, #4
     15e:	d1f3      	bne.n	148 <GPIO_Init+0x88>
    GPIOx->INTENSET |= GPIO_Pin;
     160:	6a03      	ldr	r3, [r0, #32]
     162:	4313      	orrs	r3, r2
     164:	6203      	str	r3, [r0, #32]
    GPIOx->INTPOLSET |= GPIO_Pin;
     166:	6b03      	ldr	r3, [r0, #48]	; 0x30
     168:	4313      	orrs	r3, r2
     16a:	6303      	str	r3, [r0, #48]	; 0x30
    GPIOx->INTTYPESET |= GPIO_Pin;
     16c:	6a83      	ldr	r3, [r0, #40]	; 0x28
     16e:	4313      	orrs	r3, r2
     170:	6283      	str	r3, [r0, #40]	; 0x28
}
     172:	e7e9      	b.n	148 <GPIO_Init+0x88>

00000174 <GPIO_SetBit>:
  GPIOx->DATAOUT |= GPIO_Pin;
     174:	6843      	ldr	r3, [r0, #4]
     176:	430b      	orrs	r3, r1
     178:	6043      	str	r3, [r0, #4]
}
     17a:	4770      	bx	lr

0000017c <GPIO_ResetBit>:
  GPIOx->DATAOUT &= ~GPIO_Pin;
     17c:	6843      	ldr	r3, [r0, #4]
     17e:	ea23 0301 	bic.w	r3, r3, r1
     182:	6043      	str	r3, [r0, #4]
}
     184:	4770      	bx	lr
	...

00000188 <NVIC_Init>:
  * @param NVIC_InitTypeDef Pointer
  * @return none
  * @brief Initial interrupt priority.
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
     188:	b570      	push	{r4, r5, r6, lr}

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels */
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
     18a:	2501      	movs	r5, #1
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
     18c:	7801      	ldrb	r1, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
     18e:	f001 031f 	and.w	r3, r1, #31
     192:	409d      	lsls	r5, r3
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
     194:	78c3      	ldrb	r3, [r0, #3]
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     196:	094c      	lsrs	r4, r1, #5
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
     198:	b1bb      	cbz	r3, 1ca <NVIC_Init+0x42>
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 0x08;
     19a:	4b0e      	ldr	r3, [pc, #56]	; (1d4 <NVIC_Init+0x4c>)
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
     19c:	7846      	ldrb	r6, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700)) >> 0x08;
     19e:	68da      	ldr	r2, [r3, #12]
     1a0:	43d2      	mvns	r2, r2
     1a2:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
     1a6:	f1c2 0304 	rsb	r3, r2, #4
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
     1aa:	409e      	lsls	r6, r3
    tmppriority |= NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
     1ac:	7883      	ldrb	r3, [r0, #2]
    tmpsub = tmpsub >> tmppriority;
     1ae:	200f      	movs	r0, #15
     1b0:	fa20 f202 	lsr.w	r2, r0, r2
    tmppriority |= NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
     1b4:	4013      	ands	r3, r2
     1b6:	4333      	orrs	r3, r6
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
     1b8:	4a07      	ldr	r2, [pc, #28]	; (1d8 <NVIC_Init+0x50>)
    tmppriority = tmppriority << 0x04;
     1ba:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
     1bc:	b2db      	uxtb	r3, r3
     1be:	4411      	add	r1, r2
     1c0:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     1c4:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  {
    /* Disable the Selected IRQ Channels */
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
     1c8:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     1ca:	4b03      	ldr	r3, [pc, #12]	; (1d8 <NVIC_Init+0x50>)
     1cc:	3420      	adds	r4, #32
     1ce:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
}
     1d2:	e7f9      	b.n	1c8 <NVIC_Init+0x40>
     1d4:	e000ed00 	.word	0xe000ed00
     1d8:	e000e100 	.word	0xe000e100

000001dc <SPI_Init>:
  SPI->CTRL = 0;
     1dc:	2300      	movs	r3, #0
     1de:	4a0b      	ldr	r2, [pc, #44]	; (20c <Heap_Size+0xc>)
     1e0:	6113      	str	r3, [r2, #16]
  SPI->STATUS = 0;
     1e2:	6093      	str	r3, [r2, #8]
  if(SPI_InitStruct->DIRECTION == 1)
     1e4:	7803      	ldrb	r3, [r0, #0]
     1e6:	1e59      	subs	r1, r3, #1
     1e8:	424b      	negs	r3, r1
     1ea:	414b      	adcs	r3, r1
  if(SPI_InitStruct->PHASE == 1)
     1ec:	7841      	ldrb	r1, [r0, #1]
     1ee:	2901      	cmp	r1, #1
  if(SPI_InitStruct->POLARITY == 1)
     1f0:	7881      	ldrb	r1, [r0, #2]
    new_ctrl |= SPI_CR_PHASE;
     1f2:	bf08      	it	eq
     1f4:	f043 0302 	orreq.w	r3, r3, #2
  if(SPI_InitStruct->POLARITY == 1)
     1f8:	2901      	cmp	r1, #1
  new_ctrl |= (SPI_InitStruct->CLKSEL << SPI_CR_CLKSEL_Pos);
     1fa:	78c1      	ldrb	r1, [r0, #3]
    new_ctrl |= SPI_CR_POLARITY;
     1fc:	bf08      	it	eq
     1fe:	f043 0304 	orreq.w	r3, r3, #4
  new_ctrl |= (SPI_InitStruct->CLKSEL << SPI_CR_CLKSEL_Pos);
     202:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  SPI->CTRL = new_ctrl;
     206:	6113      	str	r3, [r2, #16]
}
     208:	4770      	bx	lr
     20a:	bf00      	nop
     20c:	40002200 	.word	0x40002200

00000210 <SPI_ReadWriteByte>:
  */
uint8_t SPI_ReadWriteByte(uint8_t cmd)
{
  uint32_t master_rx_data;

  while (!(SPI->STATUS & (1UL << 5)));
     210:	4b05      	ldr	r3, [pc, #20]	; (228 <SPI_ReadWriteByte+0x18>)
     212:	689a      	ldr	r2, [r3, #8]
     214:	0691      	lsls	r1, r2, #26
     216:	d5fc      	bpl.n	212 <SPI_ReadWriteByte+0x2>
  SPI->WDATA = cmd;
     218:	6058      	str	r0, [r3, #4]
  while (!(SPI->STATUS & (1UL << 6)));
     21a:	689a      	ldr	r2, [r3, #8]
     21c:	0652      	lsls	r2, r2, #25
     21e:	d5fc      	bpl.n	21a <SPI_ReadWriteByte+0xa>
  master_rx_data = SPI->RDATA;
     220:	6818      	ldr	r0, [r3, #0]

  return master_rx_data & 0xff;
}
     222:	b2c0      	uxtb	r0, r0
     224:	4770      	bx	lr
     226:	bf00      	nop
     228:	40002200 	.word	0x40002200

0000022c <SPI_Select_Slave>:
  * @return none
  * @brief Select Slave
  */
void SPI_Select_Slave(uint32_t Slave_address)
{
  SPI->SSMASK = Slave_address;
     22c:	4b01      	ldr	r3, [pc, #4]	; (234 <SPI_Select_Slave+0x8>)
     22e:	60d8      	str	r0, [r3, #12]
}
     230:	4770      	bx	lr
     232:	bf00      	nop
     234:	40002200 	.word	0x40002200

00000238 <UART_Init>:
ErrorStatus UART_Init(UART_TypeDef* UARTx, UART_InitTypeDef* UART_InitStruct)
{
  uint32_t new_ctrl = 0;

  /* Initial all register to zero */
  UARTx->DATA = 0;
     238:	2300      	movs	r3, #0
     23a:	6003      	str	r3, [r0, #0]
  UARTx->STATE = 0;
     23c:	6043      	str	r3, [r0, #4]
  UARTx->CTRL = 0;
     23e:	6083      	str	r3, [r0, #8]
  UARTx->INTCLEAR = 0;
     240:	60c3      	str	r3, [r0, #12]
  UARTx->BAUDDIV = 0;
     242:	6103      	str	r3, [r0, #16]

  /* Config CTRL register */
  /* Tx Enable */
  if(UART_InitStruct->UART_Mode.UARTMode_Tx == ENABLE)
     244:	790b      	ldrb	r3, [r1, #4]
     246:	1e5a      	subs	r2, r3, #1
     248:	4253      	negs	r3, r2
     24a:	4153      	adcs	r3, r2
  {
    new_ctrl |= UART_CTRL_TXEN;
  }

  /* Rx Enable */
  if(UART_InitStruct->UART_Mode.UARTMode_Rx == ENABLE)
     24c:	794a      	ldrb	r2, [r1, #5]
     24e:	2a01      	cmp	r2, #1
  {
    new_ctrl |= UART_CTRL_RXEN;
  }

  /* Tx Interrupt Enable */
  if(UART_InitStruct->UART_Int.UARTInt_Tx == ENABLE)
     250:	798a      	ldrb	r2, [r1, #6]
    new_ctrl |= UART_CTRL_RXEN;
     252:	bf08      	it	eq
     254:	f043 0302 	orreq.w	r3, r3, #2
  if(UART_InitStruct->UART_Int.UARTInt_Tx == ENABLE)
     258:	2a01      	cmp	r2, #1
  {
    new_ctrl |= UART_CTRL_TXIRQEN;
  }

  /* Rx Interrupt Enable */
  if(UART_InitStruct->UART_Int.UARTInt_Rx == ENABLE)
     25a:	79ca      	ldrb	r2, [r1, #7]
    new_ctrl |= UART_CTRL_TXIRQEN;
     25c:	bf08      	it	eq
     25e:	f043 0304 	orreq.w	r3, r3, #4
  if(UART_InitStruct->UART_Int.UARTInt_Rx == ENABLE)
     262:	2a01      	cmp	r2, #1
  {
    new_ctrl |= UART_CTRL_RXIRQEN;
  }

  /* Tx Overrun Enable */
  if(UART_InitStruct->UART_Ovr.UARTOvr_Tx == ENABLE)
     264:	7a0a      	ldrb	r2, [r1, #8]
    new_ctrl |= UART_CTRL_RXIRQEN;
     266:	bf08      	it	eq
     268:	f043 0308 	orreq.w	r3, r3, #8
  if(UART_InitStruct->UART_Ovr.UARTOvr_Tx == ENABLE)
     26c:	2a01      	cmp	r2, #1
  {
    new_ctrl |= UART_CTRL_TXORIRQEN;
  }

  /* Rx Overrun Enable */
  if(UART_InitStruct->UART_Ovr.UARTOvr_Rx == ENABLE)
     26e:	7a4a      	ldrb	r2, [r1, #9]
    new_ctrl |= UART_CTRL_TXORIRQEN;
     270:	bf08      	it	eq
     272:	f043 0310 	orreq.w	r3, r3, #16
  if(UART_InitStruct->UART_Ovr.UARTOvr_Rx == ENABLE)
     276:	2a01      	cmp	r2, #1
  {
    new_ctrl |= UART_CTRL_RXORIRQEN;
  }

  /* High Speed Test Mode Enable */
  if(UART_InitStruct->UART_Hstm == ENABLE)
     278:	7a8a      	ldrb	r2, [r1, #10]
    new_ctrl |= UART_CTRL_RXORIRQEN;
     27a:	bf08      	it	eq
     27c:	f043 0320 	orreq.w	r3, r3, #32
  if(UART_InitStruct->UART_Hstm == ENABLE)
     280:	2a01      	cmp	r2, #1
  {
    new_ctrl |= UART_CTRL_HSTM;
  }

  UARTx->CTRL = 0;         /* Disable UART when changing configuration */
     282:	f04f 0200 	mov.w	r2, #0
    new_ctrl |= UART_CTRL_HSTM;
     286:	bf08      	it	eq
     288:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  UARTx->CTRL = 0;         /* Disable UART when changing configuration */
     28c:	6082      	str	r2, [r0, #8]
  UARTx->CTRL = new_ctrl;  /* Update CTRL register to new value */
     28e:	6083      	str	r3, [r0, #8]

  /* Config baud divider */
  UARTx->BAUDDIV = PCLK1 / UART_InitStruct->UART_BaudRate;
     290:	4b06      	ldr	r3, [pc, #24]	; (2ac <UART_Init+0x74>)
     292:	680a      	ldr	r2, [r1, #0]
     294:	681b      	ldr	r3, [r3, #0]
     296:	fbb3 f3f2 	udiv	r3, r3, r2
     29a:	6103      	str	r3, [r0, #16]

  if((UARTx->STATE & (UART_STATE_RXOR | UART_STATE_TXOR)))
     29c:	6843      	ldr	r3, [r0, #4]
     29e:	f013 0f0c 	tst.w	r3, #12
  }
  else
  { 
    return SUCCESS;
  }
}
     2a2:	bf0c      	ite	eq
     2a4:	2001      	moveq	r0, #1
     2a6:	2000      	movne	r0, #0
     2a8:	4770      	bx	lr
     2aa:	bf00      	nop
     2ac:	20000018 	.word	0x20000018

000002b0 <UART_ClearRxIRQ>:
  * @return none
  * @brief  Clears the RX interrupt status.
  */
void UART_ClearRxIRQ(UART_TypeDef* UARTx)
{
  UARTx->INTCLEAR = UART_INTCLEAR_RXIRQ;
     2b0:	2302      	movs	r3, #2
     2b2:	60c3      	str	r3, [r0, #12]
}
     2b4:	4770      	bx	lr

000002b6 <NMI_Handler>:
#include "main.h"
#include "scd_inc.h"

void NMI_Handler(void)
{
    while (1)
     2b6:	e7fe      	b.n	2b6 <NMI_Handler>

000002b8 <HardFault_Handler>:
    }
}

void HardFault_Handler(void)
{
    while (1)
     2b8:	e7fe      	b.n	2b8 <HardFault_Handler>

000002ba <MemManage_Handler>:
    }
}

void MemManage_Handler(void)
{
    while (1)
     2ba:	e7fe      	b.n	2ba <MemManage_Handler>

000002bc <BusFault_Handler>:
    }
}

void BusFault_Handler(void)
{
    while (1)
     2bc:	e7fe      	b.n	2bc <BusFault_Handler>

000002be <UsageFault_Handler>:
    }
}

void UsageFault_Handler(void)
{
    while (1)
     2be:	e7fe      	b.n	2be <UsageFault_Handler>

000002c0 <SVC_Handler>:
    }
}

void SVC_Handler(void)
{
    while (1)
     2c0:	e7fe      	b.n	2c0 <SVC_Handler>

000002c2 <DebugMon_Handler>:
    }
}

void DebugMon_Handler(void)
{
    while (1)
     2c2:	e7fe      	b.n	2c2 <DebugMon_Handler>

000002c4 <PendSV_Handler>:
    }
}

void PendSV_Handler(void)
{
    while (1)
     2c4:	e7fe      	b.n	2c4 <PendSV_Handler>
	...

000002c8 <SysTick_Handler>:
    while (--cycles);
}

void SysTick_Handler(void)
{
    ms_cnt++;
     2c8:	4a20      	ldr	r2, [pc, #128]	; (34c <SysTick_Handler+0x84>)
{
     2ca:	b510      	push	{r4, lr}
    ms_cnt++;
     2cc:	6813      	ldr	r3, [r2, #0]
     2ce:	3301      	adds	r3, #1
     2d0:	6013      	str	r3, [r2, #0]
    if (initOk)
     2d2:	4b1f      	ldr	r3, [pc, #124]	; (350 <SysTick_Handler+0x88>)
     2d4:	881b      	ldrh	r3, [r3, #0]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d036      	beq.n	348 <SysTick_Handler+0x80>
    {
        SPI_Select_Slave(1);
     2da:	2001      	movs	r0, #1
     2dc:	f7ff ffa6 	bl	22c <SPI_Select_Slave>
        adcRawData = SPI_ReadWriteByte(0) << 8;
     2e0:	2000      	movs	r0, #0
     2e2:	f7ff ff95 	bl	210 <SPI_ReadWriteByte>
     2e6:	4c1b      	ldr	r4, [pc, #108]	; (354 <SysTick_Handler+0x8c>)
     2e8:	0200      	lsls	r0, r0, #8
     2ea:	8020      	strh	r0, [r4, #0]
        adcRawData |= SPI_ReadWriteByte(0);
     2ec:	2000      	movs	r0, #0
     2ee:	f7ff ff8f 	bl	210 <SPI_ReadWriteByte>
     2f2:	8823      	ldrh	r3, [r4, #0]
     2f4:	4318      	orrs	r0, r3
     2f6:	8020      	strh	r0, [r4, #0]
        SPI_Select_Slave(0);
     2f8:	2000      	movs	r0, #0
     2fa:	f7ff ff97 	bl	22c <SPI_Select_Slave>
        voltAns = ((int32_t)adcRawData - (int32_t)0x8000) * 375e-6f;
     2fe:	8820      	ldrh	r0, [r4, #0]

        GPIO_ResetBit(GPIO0, GPIO_Pin_1);
        dacRawData = voltTar * (1023.0f / 5.0f);
        dacRawData <<= 2;
     300:	4c15      	ldr	r4, [pc, #84]	; (358 <SysTick_Handler+0x90>)
        voltAns = ((int32_t)adcRawData - (int32_t)0x8000) * 375e-6f;
     302:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
     306:	f001 f809 	bl	131c <__aeabi_i2f>
     30a:	4914      	ldr	r1, [pc, #80]	; (35c <SysTick_Handler+0x94>)
     30c:	f000 fe98 	bl	1040 <__aeabi_fmul>
     310:	4b13      	ldr	r3, [pc, #76]	; (360 <SysTick_Handler+0x98>)
        GPIO_ResetBit(GPIO0, GPIO_Pin_1);
     312:	2102      	movs	r1, #2
        voltAns = ((int32_t)adcRawData - (int32_t)0x8000) * 375e-6f;
     314:	6018      	str	r0, [r3, #0]
        GPIO_ResetBit(GPIO0, GPIO_Pin_1);
     316:	4813      	ldr	r0, [pc, #76]	; (364 <SysTick_Handler+0x9c>)
     318:	f7ff ff30 	bl	17c <GPIO_ResetBit>
        dacRawData = voltTar * (1023.0f / 5.0f);
     31c:	4b12      	ldr	r3, [pc, #72]	; (368 <SysTick_Handler+0xa0>)
     31e:	4913      	ldr	r1, [pc, #76]	; (36c <SysTick_Handler+0xa4>)
     320:	6818      	ldr	r0, [r3, #0]
     322:	f000 fe8d 	bl	1040 <__aeabi_fmul>
     326:	f001 f84d 	bl	13c4 <__aeabi_f2uiz>
        dacRawData <<= 2;
     32a:	0080      	lsls	r0, r0, #2
     32c:	b280      	uxth	r0, r0
     32e:	8020      	strh	r0, [r4, #0]
        SPI_ReadWriteByte((dacRawData & 0xff00u) >> 8);
     330:	0a00      	lsrs	r0, r0, #8
     332:	f7ff ff6d 	bl	210 <SPI_ReadWriteByte>
        SPI_ReadWriteByte((dacRawData & 0xffu));
     336:	7820      	ldrb	r0, [r4, #0]
     338:	f7ff ff6a 	bl	210 <SPI_ReadWriteByte>
        GPIO_SetBit(GPIO0, GPIO_Pin_1);
    }
}
     33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        GPIO_SetBit(GPIO0, GPIO_Pin_1);
     340:	2102      	movs	r1, #2
     342:	4808      	ldr	r0, [pc, #32]	; (364 <SysTick_Handler+0x9c>)
     344:	f7ff bf16 	b.w	174 <GPIO_SetBit>
}
     348:	bd10      	pop	{r4, pc}
     34a:	bf00      	nop
     34c:	2000002c 	.word	0x2000002c
     350:	20000028 	.word	0x20000028
     354:	20000024 	.word	0x20000024
     358:	20000026 	.word	0x20000026
     35c:	39c49ba6 	.word	0x39c49ba6
     360:	20000030 	.word	0x20000030
     364:	40010000 	.word	0x40010000
     368:	20000000 	.word	0x20000000
     36c:	434c999a 	.word	0x434c999a

00000370 <USER_INT0_Handler>:
/*  file (startup_gw1ns4c.s).                                                 */
/******************************************************************************/

void USER_INT0_Handler(void)
{
    while (1)
     370:	e7fe      	b.n	370 <USER_INT0_Handler>

00000372 <USER_INT1_Handler>:
    }
}

void USER_INT1_Handler(void)
{
    while (1)
     372:	e7fe      	b.n	372 <USER_INT1_Handler>

00000374 <USER_INT2_Handler>:
    }
}

void USER_INT2_Handler(void)
{
    while (1)
     374:	e7fe      	b.n	374 <USER_INT2_Handler>

00000376 <USER_INT3_Handler>:
    }
}

void USER_INT3_Handler(void)
{
    while (1)
     376:	e7fe      	b.n	376 <USER_INT3_Handler>

00000378 <USER_INT4_Handler>:
    }
}

void USER_INT4_Handler(void)
{
    while (1)
     378:	e7fe      	b.n	378 <USER_INT4_Handler>

0000037a <USER_INT5_Handler>:
    }
}

void USER_INT5_Handler(void)
{
    while (1)
     37a:	e7fe      	b.n	37a <USER_INT5_Handler>

0000037c <UART0_Handler>:
    {
    }
}

void UART0_Handler(void)
{
     37c:	b508      	push	{r3, lr}
    if (UART0->STATE & UART_STATE_RXBF)
     37e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     382:	685a      	ldr	r2, [r3, #4]
     384:	0792      	lsls	r2, r2, #30
     386:	d504      	bpl.n	392 <UART0_Handler+0x16>
    {
        SCD_Rev1Byte(&scd_1, (UART0->DATA));
     388:	6819      	ldr	r1, [r3, #0]
     38a:	4805      	ldr	r0, [pc, #20]	; (3a0 <UART0_Handler+0x24>)
     38c:	b289      	uxth	r1, r1
     38e:	f000 fcc3 	bl	d18 <SCD_Rev1Byte>
    }
    UART_ClearRxIRQ(UART0);
}
     392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UART_ClearRxIRQ(UART0);
     396:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
     39a:	f7ff bf89 	b.w	2b0 <UART_ClearRxIRQ>
     39e:	bf00      	nop
     3a0:	200000b0 	.word	0x200000b0

000003a4 <UART1_Handler>:

void UART1_Handler(void)
{
    while (1)
     3a4:	e7fe      	b.n	3a4 <UART1_Handler>

000003a6 <TIMER0_Handler>:
    }
}

void TIMER0_Handler(void)
{
    while (1)
     3a6:	e7fe      	b.n	3a6 <TIMER0_Handler>

000003a8 <TIMER1_Handler>:
    }
}

void TIMER1_Handler(void)
{
    while (1)
     3a8:	e7fe      	b.n	3a8 <TIMER1_Handler>

000003aa <I2C_Handler>:
    }
}

void I2C_Handler(void)
{
    while (1)
     3aa:	e7fe      	b.n	3aa <I2C_Handler>

000003ac <RTC_Handler>:
    }
}

void RTC_Handler(void)
{
    while (1)
     3ac:	e7fe      	b.n	3ac <RTC_Handler>

000003ae <PORT0_0_Handler>:
    }
}

void PORT0_0_Handler(void)
{
    while (1)
     3ae:	e7fe      	b.n	3ae <PORT0_0_Handler>

000003b0 <PORT0_1_Handler>:
    }
}

void PORT0_1_Handler(void)
{
    while (1)
     3b0:	e7fe      	b.n	3b0 <PORT0_1_Handler>

000003b2 <PORT0_2_Handler>:
    }
}

void PORT0_2_Handler(void)
{
    while (1)
     3b2:	e7fe      	b.n	3b2 <PORT0_2_Handler>

000003b4 <PORT0_3_Handler>:
    }
}

void PORT0_3_Handler(void)
{
    while (1)
     3b4:	e7fe      	b.n	3b4 <PORT0_3_Handler>

000003b6 <PORT0_4_Handler>:
    }
}

void PORT0_4_Handler(void)
{
    while (1)
     3b6:	e7fe      	b.n	3b6 <PORT0_4_Handler>

000003b8 <PORT0_5_Handler>:
    }
}

void PORT0_5_Handler(void)
{
    while (1)
     3b8:	e7fe      	b.n	3b8 <PORT0_5_Handler>

000003ba <PORT0_6_Handler>:
    }
}

void PORT0_6_Handler(void)
{
    while (1)
     3ba:	e7fe      	b.n	3ba <PORT0_6_Handler>

000003bc <PORT0_7_Handler>:
    }
}

void PORT0_7_Handler(void)
{
    while (1)
     3bc:	e7fe      	b.n	3bc <PORT0_7_Handler>

000003be <PORT0_8_Handler>:
    }
}

void PORT0_8_Handler(void)
{
    while (1)
     3be:	e7fe      	b.n	3be <PORT0_8_Handler>

000003c0 <PORT0_9_Handler>:
    }
}

void PORT0_9_Handler(void)
{
    while (1)
     3c0:	e7fe      	b.n	3c0 <PORT0_9_Handler>

000003c2 <PORT0_10_Handler>:
    }
}

void PORT0_10_Handler(void)
{
    while (1)
     3c2:	e7fe      	b.n	3c2 <PORT0_10_Handler>

000003c4 <PORT0_11_Handler>:
    }
}

void PORT0_11_Handler(void)
{
    while (1)
     3c4:	e7fe      	b.n	3c4 <PORT0_11_Handler>

000003c6 <PORT0_12_Handler>:
    }
}

void PORT0_12_Handler(void)
{
    while (1)
     3c6:	e7fe      	b.n	3c6 <PORT0_12_Handler>

000003c8 <PORT0_13_Handler>:
    }
}

void PORT0_13_Handler(void)
{
    while (1)
     3c8:	e7fe      	b.n	3c8 <PORT0_13_Handler>

000003ca <PORT0_14_Handler>:
    }
}

void PORT0_14_Handler(void)
{
    while (1)
     3ca:	e7fe      	b.n	3ca <PORT0_14_Handler>

000003cc <PORT0_15_Handler>:
    }
}

void PORT0_15_Handler(void)
{
    while (1)
     3cc:	e7fe      	b.n	3cc <PORT0_15_Handler>
	...

000003d0 <GPIOInit>:
#include "scd_inc.h"


//Initializes GPIO
void GPIOInit(void)
{
     3d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    GPIO_InitTypeDef GPIO_InitType;

    GPIO_InitType.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
     3d2:	2303      	movs	r3, #3
    GPIO_InitType.GPIO_Mode = GPIO_Mode_OUT;
     3d4:	2501      	movs	r5, #1
    GPIO_InitType.GPIO_Int = GPIO_Int_Disable;

    GPIO_Init(GPIO0, &GPIO_InitType);
     3d6:	4c09      	ldr	r4, [pc, #36]	; (3fc <GPIOInit+0x2c>)
     3d8:	4669      	mov	r1, sp
     3da:	4620      	mov	r0, r4
    GPIO_InitType.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
     3dc:	9300      	str	r3, [sp, #0]
    GPIO_InitType.GPIO_Mode = GPIO_Mode_OUT;
     3de:	f8ad 5004 	strh.w	r5, [sp, #4]
    GPIO_Init(GPIO0, &GPIO_InitType);
     3e2:	f7ff fe6d 	bl	c0 <GPIO_Init>

    // pin0 adcReset
    GPIO_ResetBit(GPIO0, GPIO_Pin_0);
     3e6:	4629      	mov	r1, r5
     3e8:	4620      	mov	r0, r4
     3ea:	f7ff fec7 	bl	17c <GPIO_ResetBit>
    // pin1 dacCs
    GPIO_SetBit(GPIO0, GPIO_Pin_1);
     3ee:	2102      	movs	r1, #2
     3f0:	4620      	mov	r0, r4
     3f2:	f7ff febf 	bl	174 <GPIO_SetBit>

}
     3f6:	b003      	add	sp, #12
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	bf00      	nop
     3fc:	40010000 	.word	0x40010000

00000400 <delay_ms>:

//delay ms
void delay_ms(uint32_t delay_ms)
{
    // delay_ms *= 10;
    for (uint32_t i = 0;i < delay_ms;i++)
     400:	2300      	movs	r3, #0
    {
        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0)
     402:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    for (uint32_t i = 0;i < delay_ms;i++)
     406:	4283      	cmp	r3, r0
     408:	d100      	bne.n	40c <delay_ms+0xc>
        {
            // wait
        }
    }
}
     40a:	4770      	bx	lr
        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0)
     40c:	6911      	ldr	r1, [r2, #16]
     40e:	03c9      	lsls	r1, r1, #15
     410:	d5fc      	bpl.n	40c <delay_ms+0xc>
    for (uint32_t i = 0;i < delay_ms;i++)
     412:	3301      	adds	r3, #1
     414:	e7f7      	b.n	406 <delay_ms+0x6>
	...

00000418 <UartInit>:

//Initializes UART0
void UartInit(void)
{
     418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    UART_InitTypeDef UART_InitStruct;

    UART_InitStruct.UART_Mode.UARTMode_Tx = ENABLE;
     41a:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
     41e:	4b08      	ldr	r3, [pc, #32]	; (440 <UartInit+0x28>)
    UART_InitStruct.UART_Ovr.UARTOvr_Tx = DISABLE;
    UART_InitStruct.UART_Ovr.UARTOvr_Rx = DISABLE;
    UART_InitStruct.UART_Hstm = DISABLE;
    UART_InitStruct.UART_BaudRate = 460800;

    UART_Init(UART0, &UART_InitStruct);
     420:	a901      	add	r1, sp, #4
    UART_InitStruct.UART_Mode.UARTMode_Tx = ENABLE;
     422:	e9cd 2301 	strd	r2, r3, [sp, #4]
    UART_InitStruct.UART_Ovr.UARTOvr_Tx = DISABLE;
     426:	2300      	movs	r3, #0
    UART_Init(UART0, &UART_InitStruct);
     428:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    UART_InitStruct.UART_Ovr.UARTOvr_Tx = DISABLE;
     42c:	f8ad 300c 	strh.w	r3, [sp, #12]
    UART_InitStruct.UART_Hstm = DISABLE;
     430:	f88d 300e 	strb.w	r3, [sp, #14]
    UART_Init(UART0, &UART_InitStruct);
     434:	f7ff ff00 	bl	238 <UART_Init>
}
     438:	b005      	add	sp, #20
     43a:	f85d fb04 	ldr.w	pc, [sp], #4
     43e:	bf00      	nop
     440:	01000101 	.word	0x01000101

00000444 <nvicInit>:

void nvicInit(void)
{
     444:	b507      	push	{r0, r1, r2, lr}
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
  
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
     446:	4a0c      	ldr	r2, [pc, #48]	; (478 <nvicInit+0x34>)
    // uart Rx
    InitTypeDef_NVIC.NVIC_IRQChannel = UART0_IRQn;
    InitTypeDef_NVIC.NVIC_IRQChannelPreemptionPriority = 1;
    InitTypeDef_NVIC.NVIC_IRQChannelSubPriority = 1;
    InitTypeDef_NVIC.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&InitTypeDef_NVIC);
     448:	a801      	add	r0, sp, #4
     44a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
     44c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     450:	041b      	lsls	r3, r3, #16
     452:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                       |
     454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
     45c:	60d3      	str	r3, [r2, #12]
    InitTypeDef_NVIC.NVIC_IRQChannel = UART0_IRQn;
     45e:	4b07      	ldr	r3, [pc, #28]	; (47c <nvicInit+0x38>)
     460:	9301      	str	r3, [sp, #4]
    NVIC_Init(&InitTypeDef_NVIC);
     462:	f7ff fe91 	bl	188 <NVIC_Init>

    // systick
    InitTypeDef_NVIC.NVIC_IRQChannel = SysTick_IRQn;
     466:	4b06      	ldr	r3, [pc, #24]	; (480 <nvicInit+0x3c>)
    InitTypeDef_NVIC.NVIC_IRQChannelPreemptionPriority = 2;
    InitTypeDef_NVIC.NVIC_IRQChannelSubPriority = 1;
    InitTypeDef_NVIC.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&InitTypeDef_NVIC);
     468:	a801      	add	r0, sp, #4
    InitTypeDef_NVIC.NVIC_IRQChannel = SysTick_IRQn;
     46a:	9301      	str	r3, [sp, #4]
    NVIC_Init(&InitTypeDef_NVIC);
     46c:	f7ff fe8c 	bl	188 <NVIC_Init>
}
     470:	b003      	add	sp, #12
     472:	f85d fb04 	ldr.w	pc, [sp], #4
     476:	bf00      	nop
     478:	e000ed00 	.word	0xe000ed00
     47c:	01010100 	.word	0x01010100
     480:	010102ff 	.word	0x010102ff

00000484 <SPIInit>:
void SPIInit(void)
{
    SPI_InitTypeDef init_spi;
    // 9MHz
    init_spi.CLKSEL = CLKSEL_CLK_DIV_8;
    init_spi.DIRECTION = SHIFT_DIR_MSB_FIRST;
     484:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
{
     488:	b507      	push	{r0, r1, r2, lr}
    init_spi.PHASE = SPI_CPOL_LO;
    init_spi.POLARITY = SPI_CPHA_POSEDGE;

    SPI_Init(&init_spi);
     48a:	a801      	add	r0, sp, #4
    init_spi.DIRECTION = SHIFT_DIR_MSB_FIRST;
     48c:	9301      	str	r3, [sp, #4]
    SPI_Init(&init_spi);
     48e:	f7ff fea5 	bl	1dc <SPI_Init>
}
     492:	b003      	add	sp, #12
     494:	f85d fb04 	ldr.w	pc, [sp], #4

00000498 <main>:
float voltTar = 2.5f;
uint16_t dacRawData;


int main(void)
{
     498:	b508      	push	{r3, lr}
    SystemInit();
     49a:	f000 fdab 	bl	ff4 <SystemInit>
    nvicInit();
     49e:	f7ff ffd1 	bl	444 <nvicInit>
    UartInit();
     4a2:	f7ff ffb9 	bl	418 <UartInit>
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
     4a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
     4aa:	21e0      	movs	r1, #224	; 0xe0
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
     4ac:	4a18      	ldr	r2, [pc, #96]	; (510 <main+0x78>)
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M3 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     4ae:	2400      	movs	r4, #0
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
     4b0:	615a      	str	r2, [r3, #20]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
     4b2:	4a18      	ldr	r2, [pc, #96]	; (514 <main+0x7c>)

    while (1)
    {
        if ((UART0->STATE & UART_STATE_TXBF) == 0)
        {
            UART0->DATA = scd_send1Byte(&scd_1);
     4b4:	4d18      	ldr	r5, [pc, #96]	; (518 <main+0x80>)
     4b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
     4ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     4bc:	619c      	str	r4, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
     4be:	611a      	str	r2, [r3, #16]
    GPIOInit();
     4c0:	f7ff ff86 	bl	3d0 <GPIOInit>
    SPIInit();
     4c4:	f7ff ffde 	bl	484 <SPIInit>
    delay_ms(2);
     4c8:	2002      	movs	r0, #2
     4ca:	f7ff ff99 	bl	400 <delay_ms>
    GPIO_SetBit(GPIO0, GPIO_Pin_0);
     4ce:	2101      	movs	r1, #1
     4d0:	4812      	ldr	r0, [pc, #72]	; (51c <main+0x84>)
     4d2:	f7ff fe4f 	bl	174 <GPIO_SetBit>
    delay_ms(10);
     4d6:	200a      	movs	r0, #10
     4d8:	f7ff ff92 	bl	400 <delay_ms>
    SPI_Select_Slave(0);
     4dc:	4620      	mov	r0, r4
     4de:	f7ff fea5 	bl	22c <SPI_Select_Slave>
    delay_ms(1);
     4e2:	2001      	movs	r0, #1
     4e4:	f7ff ff8c 	bl	400 <delay_ms>
    SPI_Select_Slave(1);
     4e8:	f7ff fea0 	bl	22c <SPI_Select_Slave>
    delay_ms(1);
     4ec:	2001      	movs	r0, #1
     4ee:	f7ff ff87 	bl	400 <delay_ms>
    initOk = 1;
     4f2:	4b0b      	ldr	r3, [pc, #44]	; (520 <main+0x88>)
        if ((UART0->STATE & UART_STATE_TXBF) == 0)
     4f4:	f04f 2440 	mov.w	r4, #1073758208	; 0x40004000
    initOk = 1;
     4f8:	8018      	strh	r0, [r3, #0]
    scd_init_1();
     4fa:	f000 fcf3 	bl	ee4 <scd_init_1>
        if ((UART0->STATE & UART_STATE_TXBF) == 0)
     4fe:	6863      	ldr	r3, [r4, #4]
     500:	07db      	lsls	r3, r3, #31
     502:	d4fc      	bmi.n	4fe <main+0x66>
            UART0->DATA = scd_send1Byte(&scd_1);
     504:	4628      	mov	r0, r5
     506:	f000 fccb 	bl	ea0 <scd_send1Byte>
     50a:	6020      	str	r0, [r4, #0]
     50c:	e7f7      	b.n	4fe <main+0x66>
     50e:	bf00      	nop
     510:	0001193e 	.word	0x0001193e
     514:	e000ed00 	.word	0xe000ed00
     518:	200000b0 	.word	0x200000b0
     51c:	40010000 	.word	0x40010000
     520:	20000028 	.word	0x20000028

00000524 <SCO_get>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(SCO_get, MEM_MACRO);
#endif
static uint16_t SCO_get(struct SCD_CTRL_STRUCT *scd)
{
     524:	b573      	push	{r0, r1, r4, r5, r6, lr}
                return (*tempPtr) & 0xffu;
            }
        }
        else
        {
            scd->byteToSend = 0;
     526:	2200      	movs	r2, #0
{
     528:	4604      	mov	r4, r0
    const unsigned char endByte[SCO_ENDBYTE_NUM + 1] = {0x00, 0x00, 0x80, 0x7f};
     52a:	4b48      	ldr	r3, [pc, #288]	; (64c <SCO_get+0x128>)
     52c:	681d      	ldr	r5, [r3, #0]
     52e:	7919      	ldrb	r1, [r3, #4]
    if (scd->structToSend == 0)
     530:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    const unsigned char endByte[SCO_ENDBYTE_NUM + 1] = {0x00, 0x00, 0x80, 0x7f};
     534:	9500      	str	r5, [sp, #0]
    if (scd->structToSend == 0)
     536:	b218      	sxth	r0, r3
    const unsigned char endByte[SCO_ENDBYTE_NUM + 1] = {0x00, 0x00, 0x80, 0x7f};
     538:	f88d 1004 	strb.w	r1, [sp, #4]
    if (scd->structToSend == 0)
     53c:	b9a0      	cbnz	r0, 568 <SCO_get+0x44>
        if (scd->byteToSend < SCO_STARTBYTE_NUM)
     53e:	f8b4 604a 	ldrh.w	r6, [r4, #74]	; 0x4a
     542:	0436      	lsls	r6, r6, #16
     544:	d507      	bpl.n	556 <SCO_get+0x32>
            return startByte[scd->byteToSend++];
     546:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
     54a:	3301      	adds	r3, #1
     54c:	b21b      	sxth	r3, r3
     54e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            scd->structToSend++;
            // 数据位发送完成，递归找下一数据
            return SCO_get(scd);
        }
    }
}
     552:	b002      	add	sp, #8
     554:	bd70      	pop	{r4, r5, r6, pc}
            scd->byteToSend = 0;
     556:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            scd->structToSend++;
     55a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
     55e:	3301      	adds	r3, #1
     560:	b21b      	sxth	r3, r3
     562:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
            return SCO_get(scd);
     566:	e7e3      	b.n	530 <SCO_get+0xc>
    else if (scd->structToSendTab[scd->structToSend - 1] > scd->structNum)
     568:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
     56c:	b21b      	sxth	r3, r3
     56e:	3b01      	subs	r3, #1
     570:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
     574:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
     578:	b200      	sxth	r0, r0
     57a:	b21b      	sxth	r3, r3
     57c:	4298      	cmp	r0, r3
        if (scd->byteToSend < SCO_ENDBYTE_NUM)
     57e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
     582:	b21b      	sxth	r3, r3
    else if (scd->structToSendTab[scd->structToSend - 1] > scd->structNum)
     584:	dd16      	ble.n	5b4 <SCO_get+0x90>
        if (scd->byteToSend < SCO_ENDBYTE_NUM)
     586:	2b03      	cmp	r3, #3
     588:	dc0c      	bgt.n	5a4 <SCO_get+0x80>
            return endByte[scd->byteToSend++];
     58a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
     58e:	b21a      	sxth	r2, r3
     590:	3301      	adds	r3, #1
     592:	b21b      	sxth	r3, r3
     594:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
     598:	f102 0308 	add.w	r3, r2, #8
     59c:	446b      	add	r3, sp
     59e:	f813 0c08 	ldrb.w	r0, [r3, #-8]
     5a2:	e7d6      	b.n	552 <SCO_get+0x2e>
            scd->byteToSend = 0;
     5a4:	2300      	movs	r3, #0
            return 0x100u;
     5a6:	f44f 7080 	mov.w	r0, #256	; 0x100
            scd->byteToSend = 0;
     5aa:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            scd->structToSend = 0;
     5ae:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
            return 0x100u;
     5b2:	e7ce      	b.n	552 <SCO_get+0x2e>
        if (scd->byteToSend < (4))
     5b4:	2b03      	cmp	r3, #3
     5b6:	dc46      	bgt.n	646 <SCO_get+0x122>
            if (scd->byteToSend == 0)
     5b8:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
     5bc:	b21b      	sxth	r3, r3
     5be:	bb43      	cbnz	r3, 612 <SCO_get+0xee>
                uint16_t judgeType = (scd->_unit_struct[scd->structToSendTab[scd->structToSend - 1]]._type) & 0xffu;
     5c0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
     5c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
     5c6:	b21b      	sxth	r3, r3
     5c8:	3b01      	subs	r3, #1
     5ca:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
                void *tempCommonPtr = (void *)scd->_unit_struct[scd->structToSendTab[scd->structToSend - 1]]._addr;
     5ce:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
                uint16_t judgeType = (scd->_unit_struct[scd->structToSendTab[scd->structToSend - 1]]._type) & 0xffu;
     5d2:	b21b      	sxth	r3, r3
                void *tempCommonPtr = (void *)scd->_unit_struct[scd->structToSendTab[scd->structToSend - 1]]._addr;
     5d4:	b212      	sxth	r2, r2
                uint16_t judgeType = (scd->_unit_struct[scd->structToSendTab[scd->structToSend - 1]]._type) & 0xffu;
     5d6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
                void *tempCommonPtr = (void *)scd->_unit_struct[scd->structToSendTab[scd->structToSend - 1]]._addr;
     5da:	3a01      	subs	r2, #1
                uint16_t judgeType = (scd->_unit_struct[scd->structToSendTab[scd->structToSend - 1]]._type) & 0xffu;
     5dc:	791b      	ldrb	r3, [r3, #4]
                void *tempCommonPtr = (void *)scd->_unit_struct[scd->structToSendTab[scd->structToSend - 1]]._addr;
     5de:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
                if (judgeType == TYJ_uint16_t)
     5e2:	2b02      	cmp	r3, #2
                void *tempCommonPtr = (void *)scd->_unit_struct[scd->structToSendTab[scd->structToSend - 1]]._addr;
     5e4:	b212      	sxth	r2, r2
     5e6:	f851 0032 	ldr.w	r0, [r1, r2, lsl #3]
                if (judgeType == TYJ_uint16_t)
     5ea:	d104      	bne.n	5f6 <SCO_get+0xd2>
                    scd->tempBuff = *tempPtr;
     5ec:	8800      	ldrh	r0, [r0, #0]
                    scd->tempBuff = (uint32_t)tempCommonPtr;
     5ee:	f000 fe91 	bl	1314 <__aeabi_ui2f>
                    scd->tempBuff = *tempPtr;
     5f2:	6420      	str	r0, [r4, #64]	; 0x40
     5f4:	e00d      	b.n	612 <SCO_get+0xee>
                else if (judgeType == TYJ_uint32_t)
     5f6:	2b04      	cmp	r3, #4
     5f8:	d101      	bne.n	5fe <SCO_get+0xda>
                    scd->tempBuff = *tempPtr;
     5fa:	6800      	ldr	r0, [r0, #0]
     5fc:	e7f7      	b.n	5ee <SCO_get+0xca>
                else if (judgeType == TYJ_int32_t)
     5fe:	2b14      	cmp	r3, #20
     600:	d103      	bne.n	60a <SCO_get+0xe6>
                    scd->tempBuff = *tempPtr;
     602:	6800      	ldr	r0, [r0, #0]
                    scd->tempBuff = *tempPtr;
     604:	f000 fe8a 	bl	131c <__aeabi_i2f>
     608:	e7f3      	b.n	5f2 <SCO_get+0xce>
                else if (judgeType == TYJ_float)
     60a:	2b24      	cmp	r3, #36	; 0x24
     60c:	d116      	bne.n	63c <SCO_get+0x118>
                    scd->tempBuff = *tempPtr;
     60e:	6803      	ldr	r3, [r0, #0]
     610:	6423      	str	r3, [r4, #64]	; 0x40
            tempPtr = &tempPtr[scd->byteToSend >> 1];
     612:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
            if (scd->byteToSend++ & 0x1)
     616:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
            uint16_t *tempPtr = (uint16_t *)(void *)&(scd->tempBuff);
     61a:	f104 0040 	add.w	r0, r4, #64	; 0x40
            if (scd->byteToSend++ & 0x1)
     61e:	b292      	uxth	r2, r2
     620:	1c51      	adds	r1, r2, #1
     622:	b209      	sxth	r1, r1
     624:	07d2      	lsls	r2, r2, #31
            tempPtr = &tempPtr[scd->byteToSend >> 1];
     626:	f343 034e 	sbfx	r3, r3, #1, #15
            if (scd->byteToSend++ & 0x1)
     62a:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
                return ((*tempPtr) >> 8) & 0xffu;
     62e:	bf4a      	itet	mi
     630:	f830 0013 	ldrhmi.w	r0, [r0, r3, lsl #1]
                return (*tempPtr) & 0xffu;
     634:	f810 0013 	ldrbpl.w	r0, [r0, r3, lsl #1]
                return ((*tempPtr) >> 8) & 0xffu;
     638:	0a00      	lsrmi	r0, r0, #8
                return (*tempPtr) & 0xffu;
     63a:	e78a      	b.n	552 <SCO_get+0x2e>
                else if (judgeType == TYJ_function)
     63c:	2b32      	cmp	r3, #50	; 0x32
     63e:	d0d6      	beq.n	5ee <SCO_get+0xca>
                    scd->tempBuff = *tempPtr;
     640:	f9b0 0000 	ldrsh.w	r0, [r0]
     644:	e7de      	b.n	604 <SCO_get+0xe0>
            scd->byteToSend = 0;
     646:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
     64a:	e786      	b.n	55a <SCO_get+0x36>
     64c:	00001427 	.word	0x00001427

00000650 <SCO_VAR>:
        {
            scd->byteToSend2 = 0;
            scd->structToSend2++;
            // 起始位发送完成，递归找下一数据
            // 将checkSum设为初值
            checkUint16Sum = 0;
     650:	2100      	movs	r1, #0
{
     652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     654:	4604      	mov	r4, r0
                return (*tempPtr) & 0xffu;
            }
        }
        else
        {
            scd->byteToSend2 = 0;
     656:	4608      	mov	r0, r1
     658:	4d51      	ldr	r5, [pc, #324]	; (7a0 <SCO_VAR+0x150>)
     65a:	882b      	ldrh	r3, [r5, #0]
    if (scd->structToSend2 == 0)
     65c:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
     660:	b232      	sxth	r2, r6
     662:	b9c2      	cbnz	r2, 696 <SCO_VAR+0x46>
        if (scd->byteToSend2 < SCO_STARTBYTE_NUM1)
     664:	f8b4 7052 	ldrh.w	r7, [r4, #82]	; 0x52
     668:	043f      	lsls	r7, r7, #16
     66a:	d509      	bpl.n	680 <SCO_VAR+0x30>
     66c:	b101      	cbz	r1, 670 <SCO_VAR+0x20>
     66e:	802b      	strh	r3, [r5, #0]
            return startByte[scd->byteToSend2++];
     670:	2000      	movs	r0, #0
     672:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
     676:	3301      	adds	r3, #1
     678:	b21b      	sxth	r3, r3
     67a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
            scd->_endbyte1[0] = checkUint16Sum & 0xffu;
            scd->_endbyte1[1] = (checkUint16Sum >> 8) & 0xffu;
            return SCO_VAR(scd);
        }
    }
}
     67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            scd->byteToSend2 = 0;
     680:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
            scd->structToSend2++;
     684:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
            return SCO_VAR(scd);
     688:	2101      	movs	r1, #1
            scd->structToSend2++;
     68a:	3301      	adds	r3, #1
     68c:	b21b      	sxth	r3, r3
     68e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
            checkUint16Sum = 0;
     692:	4613      	mov	r3, r2
            return SCO_VAR(scd);
     694:	e7e2      	b.n	65c <SCO_VAR+0xc>
    else if (scd->structToSend2 > scd->structNum)
     696:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
     69a:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
     69e:	b236      	sxth	r6, r6
     6a0:	b212      	sxth	r2, r2
     6a2:	4296      	cmp	r6, r2
     6a4:	dd1f      	ble.n	6e6 <SCO_VAR+0x96>
     6a6:	b101      	cbz	r1, 6aa <SCO_VAR+0x5a>
     6a8:	802b      	strh	r3, [r5, #0]
        if (scd->byteToSend2 < SCO_ENDBYTE_NUM1)
     6aa:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
     6ae:	b21b      	sxth	r3, r3
     6b0:	2b03      	cmp	r3, #3
     6b2:	dc09      	bgt.n	6c8 <SCO_VAR+0x78>
            return scd->_endbyte1[scd->byteToSend2++];
     6b4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
     6b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
     6ba:	b21a      	sxth	r2, r3
     6bc:	3301      	adds	r3, #1
     6be:	b21b      	sxth	r3, r3
     6c0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
     6c4:	5c88      	ldrb	r0, [r1, r2]
     6c6:	e7da      	b.n	67e <SCO_VAR+0x2e>
            scd->byteToSend2 = 0;
     6c8:	2300      	movs	r3, #0
     6ca:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
            scd->structToSend2 = 0;
     6ce:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
            if (scd->sco_protocol_num_next == 1)
     6d2:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
     6d6:	b212      	sxth	r2, r2
     6d8:	2a01      	cmp	r2, #1
     6da:	d101      	bne.n	6e0 <SCO_VAR+0x90>
                scd->sco_protocol_num_next = 0;
     6dc:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
            return 0x100u;
     6e0:	f44f 7080 	mov.w	r0, #256	; 0x100
     6e4:	e7cb      	b.n	67e <SCO_VAR+0x2e>
        if (scd->byteToSend2 < (4))
     6e6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
     6ea:	b212      	sxth	r2, r2
     6ec:	2a03      	cmp	r2, #3
     6ee:	dc48      	bgt.n	782 <SCO_VAR+0x132>
     6f0:	b101      	cbz	r1, 6f4 <SCO_VAR+0xa4>
     6f2:	802b      	strh	r3, [r5, #0]
            if (scd->byteToSend2 == 0)
     6f4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
     6f8:	b21b      	sxth	r3, r3
     6fa:	bb23      	cbnz	r3, 746 <SCO_VAR+0xf6>
                uint16_t judgeType = (scd->_unit_struct[scd->structToSend2 - 1]._type) & 0xffu;
     6fc:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
     700:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
     704:	6be1      	ldr	r1, [r4, #60]	; 0x3c
     706:	b21b      	sxth	r3, r3
     708:	4403      	add	r3, r0
                void *tempCommonPtr = (void *)scd->_unit_struct[scd->structToSend2 - 1]._addr;
     70a:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
                uint16_t judgeType = (scd->_unit_struct[scd->structToSend2 - 1]._type) & 0xffu;
     70e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
     712:	791b      	ldrb	r3, [r3, #4]
                void *tempCommonPtr = (void *)scd->_unit_struct[scd->structToSend2 - 1]._addr;
     714:	b212      	sxth	r2, r2
     716:	4402      	add	r2, r0
                if (judgeType == TYJ_uint16_t)
     718:	2b02      	cmp	r3, #2
                void *tempCommonPtr = (void *)scd->_unit_struct[scd->structToSend2 - 1]._addr;
     71a:	f851 0032 	ldr.w	r0, [r1, r2, lsl #3]
                if (judgeType == TYJ_uint16_t)
     71e:	d104      	bne.n	72a <SCO_VAR+0xda>
                    scd->tempBuff = *tempPtr;
     720:	8800      	ldrh	r0, [r0, #0]
                    scd->tempBuff = (uint32_t)tempCommonPtr;
     722:	f000 fdf7 	bl	1314 <__aeabi_ui2f>
                    scd->tempBuff = *tempPtr;
     726:	6420      	str	r0, [r4, #64]	; 0x40
     728:	e00d      	b.n	746 <SCO_VAR+0xf6>
                else if (judgeType == TYJ_uint32_t)
     72a:	2b04      	cmp	r3, #4
     72c:	d101      	bne.n	732 <SCO_VAR+0xe2>
                    scd->tempBuff = *tempPtr;
     72e:	6800      	ldr	r0, [r0, #0]
     730:	e7f7      	b.n	722 <SCO_VAR+0xd2>
                else if (judgeType == TYJ_int32_t)
     732:	2b14      	cmp	r3, #20
     734:	d103      	bne.n	73e <SCO_VAR+0xee>
                    scd->tempBuff = *tempPtr;
     736:	6800      	ldr	r0, [r0, #0]
                    scd->tempBuff = *tempPtr;
     738:	f000 fdf0 	bl	131c <__aeabi_i2f>
     73c:	e7f3      	b.n	726 <SCO_VAR+0xd6>
                else if (judgeType == TYJ_float)
     73e:	2b24      	cmp	r3, #36	; 0x24
     740:	d11a      	bne.n	778 <SCO_VAR+0x128>
                    scd->tempBuff = *tempPtr;
     742:	6803      	ldr	r3, [r0, #0]
     744:	6423      	str	r3, [r4, #64]	; 0x40
            tempPtr = &tempPtr[scd->byteToSend2 >> 1];
     746:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
            if (scd->byteToSend2++ & 0x1)
     74a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
            uint16_t *tempPtr = (uint16_t *)(void *)&(scd->tempBuff);
     74e:	f104 0040 	add.w	r0, r4, #64	; 0x40
            if (scd->byteToSend2++ & 0x1)
     752:	b29b      	uxth	r3, r3
     754:	1c59      	adds	r1, r3, #1
     756:	b209      	sxth	r1, r1
     758:	f013 0f01 	tst.w	r3, #1
            tempPtr = &tempPtr[scd->byteToSend2 >> 1];
     75c:	f342 024e 	sbfx	r2, r2, #1, #15
            if (scd->byteToSend2++ & 0x1)
     760:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
     764:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
                checkUint16Sum += *tempPtr;
     768:	bf09      	itett	eq
     76a:	882b      	ldrheq	r3, [r5, #0]
                return ((*tempPtr) >> 8) & 0xffu;
     76c:	0a00      	lsrne	r0, r0, #8
                checkUint16Sum += *tempPtr;
     76e:	181b      	addeq	r3, r3, r0
     770:	802b      	strheq	r3, [r5, #0]
                return (*tempPtr) & 0xffu;
     772:	bf08      	it	eq
     774:	b2c0      	uxtbeq	r0, r0
     776:	e782      	b.n	67e <SCO_VAR+0x2e>
                else if (judgeType == TYJ_function)
     778:	2b32      	cmp	r3, #50	; 0x32
     77a:	d0d2      	beq.n	722 <SCO_VAR+0xd2>
                    scd->tempBuff = *tempPtr;
     77c:	f9b0 0000 	ldrsh.w	r0, [r0]
     780:	e7da      	b.n	738 <SCO_VAR+0xe8>
            scd->byteToSend2 = 0;
     782:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
            scd->structToSend2++;
     786:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
            scd->_endbyte1[0] = checkUint16Sum & 0xffu;
     78a:	b2de      	uxtb	r6, r3
            scd->structToSend2++;
     78c:	3201      	adds	r2, #1
     78e:	b212      	sxth	r2, r2
     790:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
            scd->_endbyte1[0] = checkUint16Sum & 0xffu;
     794:	6b22      	ldr	r2, [r4, #48]	; 0x30
     796:	7016      	strb	r6, [r2, #0]
            scd->_endbyte1[1] = (checkUint16Sum >> 8) & 0xffu;
     798:	6b22      	ldr	r2, [r4, #48]	; 0x30
     79a:	0a1e      	lsrs	r6, r3, #8
     79c:	7056      	strb	r6, [r2, #1]
            return SCO_VAR(scd);
     79e:	e75d      	b.n	65c <SCO_VAR+0xc>
     7a0:	20000034 	.word	0x20000034

000007a4 <SCO_DEBUG>:
{
    // debug用，只会发0
    (void)scd;

    // 若模式没改就发0
    if (scd->sco_protocol_num_next == 2)
     7a4:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
     7a8:	b200      	sxth	r0, r0
     7aa:	3802      	subs	r0, #2
     7ac:	bf18      	it	ne
     7ae:	2001      	movne	r0, #1
    {
        return 0;
    }
    // 否则发送0x100，切换协议
    return 0x100u;
}
     7b0:	0200      	lsls	r0, r0, #8
     7b2:	4770      	bx	lr

000007b4 <SCO_DUMP>:
            return scd->_endbyte2[scd->byteToSend3++];
        }
        else
        {
            scd->byteToSend3 = 0;
            checkUint16Sum = 0;
     7b4:	2200      	movs	r2, #0
{
     7b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                return (*tempPtr) & 0xffu;
            }
        }
        else
        {
            scd->byteToSend3 = 0;
     7ba:	4611      	mov	r1, r2
{
     7bc:	4604      	mov	r4, r0
    else if (scd->dumpPkgCnt > MAX_NUMS_PER_FRAME)
     7be:	f240 3ae9 	movw	sl, #1001	; 0x3e9
            scd->dumpPkgCnt = 2;
     7c2:	f04f 0802 	mov.w	r8, #2
            scd->ifContPkg = 1;
     7c6:	f04f 0e01 	mov.w	lr, #1
                scd->_endbyte2[0] = 0xcdu;
     7ca:	f04f 0ccd 	mov.w	ip, #205	; 0xcd
                scd->_endbyte2[1] = 0xccu;
     7ce:	26cc      	movs	r6, #204	; 0xcc
                scd->_endbyte2[2] = 0x8cu;
     7d0:	278c      	movs	r7, #140	; 0x8c
     7d2:	4d76      	ldr	r5, [pc, #472]	; (9ac <Stack_Size+0x1ac>)
     7d4:	882b      	ldrh	r3, [r5, #0]
    if (scd->structToSend3 >= scd->dumpNumCnt)
     7d6:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
     7da:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
     7de:	fa0f f989 	sxth.w	r9, r9
     7e2:	b200      	sxth	r0, r0
     7e4:	4581      	cmp	r9, r0
     7e6:	db36      	blt.n	856 <Stack_Size+0x56>
     7e8:	b102      	cbz	r2, 7ec <SCO_DUMP+0x38>
     7ea:	802b      	strh	r3, [r5, #0]
        if (scd->byteToSend3 == 0)
     7ec:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
     7f0:	b21b      	sxth	r3, r3
     7f2:	b95b      	cbnz	r3, 80c <Stack_Size+0xc>
            scd->_endbyte2[0] = 0xcdu;
     7f4:	22cd      	movs	r2, #205	; 0xcd
     7f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
     7f8:	701a      	strb	r2, [r3, #0]
            scd->_endbyte2[1] = 0xccu;
     7fa:	22cc      	movs	r2, #204	; 0xcc
     7fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
     7fe:	705a      	strb	r2, [r3, #1]
            scd->_endbyte2[2] = 0xcu;
     800:	220c      	movs	r2, #12
     802:	6b63      	ldr	r3, [r4, #52]	; 0x34
     804:	709a      	strb	r2, [r3, #2]
            scd->_endbyte2[3] = 0x40u;
     806:	2240      	movs	r2, #64	; 0x40
     808:	6b63      	ldr	r3, [r4, #52]	; 0x34
     80a:	70da      	strb	r2, [r3, #3]
        if (scd->byteToSend3 < SCO_ENDBYTE_NUM2)
     80c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
     810:	b21b      	sxth	r3, r3
     812:	2b07      	cmp	r3, #7
     814:	dc0a      	bgt.n	82c <Stack_Size+0x2c>
            return scd->_endbyte2[scd->byteToSend3++];
     816:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
     81a:	6b61      	ldr	r1, [r4, #52]	; 0x34
     81c:	b21a      	sxth	r2, r3
     81e:	3301      	adds	r3, #1
     820:	b21b      	sxth	r3, r3
     822:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
     826:	5c88      	ldrb	r0, [r1, r2]
            scd->_endbyte2[4] = checkUint16Sum & 0xffu;
            scd->_endbyte2[5] = (checkUint16Sum >> 8) & 0xffu;
            return SCO_DUMP(scd);
        }
    }
}
     828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            scd->byteToSend3 = 0;
     82c:	2300      	movs	r3, #0
            scd->dumpPkgCnt = 2;
     82e:	2202      	movs	r2, #2
            scd->byteToSend3 = 0;
     830:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
            scd->structToSend3 = 0;
     834:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
            scd->dumpPkgCnt = 2;
     838:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
            scd->ifContPkg = 0;
     83c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
            if (scd->sco_protocol_num_next == 3)
     840:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
            checkUint16Sum = 0;
     844:	802b      	strh	r3, [r5, #0]
            if (scd->sco_protocol_num_next == 3)
     846:	b212      	sxth	r2, r2
     848:	2a03      	cmp	r2, #3
     84a:	d101      	bne.n	850 <Stack_Size+0x50>
                scd->sco_protocol_num_next = 0;
     84c:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
            return 0x100u;
     850:	f44f 7080 	mov.w	r0, #256	; 0x100
     854:	e7e8      	b.n	828 <Stack_Size+0x28>
    else if (scd->dumpPkgCnt > MAX_NUMS_PER_FRAME)
     856:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
     85a:	b200      	sxth	r0, r0
     85c:	4550      	cmp	r0, sl
        if (scd->byteToSend3 == 0)
     85e:	f8b4 0056 	ldrh.w	r0, [r4, #86]	; 0x56
     862:	b200      	sxth	r0, r0
    else if (scd->dumpPkgCnt > MAX_NUMS_PER_FRAME)
     864:	dd2f      	ble.n	8c6 <Stack_Size+0xc6>
        if (scd->byteToSend3 == 0)
     866:	b990      	cbnz	r0, 88e <Stack_Size+0x8e>
            if (scd->ifContPkg)
     868:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
                scd->_endbyte2[0] = 0xcdu;
     86c:	6b60      	ldr	r0, [r4, #52]	; 0x34
            if (scd->ifContPkg)
     86e:	fa0f f989 	sxth.w	r9, r9
     872:	f1b9 0f00 	cmp.w	r9, #0
     876:	d013      	beq.n	8a0 <Stack_Size+0xa0>
                scd->_endbyte2[3] = 0x3fu;
     878:	f04f 093f 	mov.w	r9, #63	; 0x3f
                scd->_endbyte2[0] = 0xcdu;
     87c:	f880 c000 	strb.w	ip, [r0]
                scd->_endbyte2[1] = 0xccu;
     880:	6b60      	ldr	r0, [r4, #52]	; 0x34
     882:	7046      	strb	r6, [r0, #1]
                scd->_endbyte2[2] = 0x8cu;
     884:	6b60      	ldr	r0, [r4, #52]	; 0x34
     886:	7087      	strb	r7, [r0, #2]
                scd->_endbyte2[3] = 0x3fu;
     888:	6b60      	ldr	r0, [r4, #52]	; 0x34
                scd->_endbyte2[3] = 0;
     88a:	f880 9003 	strb.w	r9, [r0, #3]
        if (scd->byteToSend3 < SCO_ENDBYTE_NUM2)
     88e:	f8b4 0056 	ldrh.w	r0, [r4, #86]	; 0x56
     892:	b200      	sxth	r0, r0
     894:	2807      	cmp	r0, #7
     896:	dc0d      	bgt.n	8b4 <Stack_Size+0xb4>
     898:	2a00      	cmp	r2, #0
     89a:	d0bc      	beq.n	816 <Stack_Size+0x16>
     89c:	802b      	strh	r3, [r5, #0]
     89e:	e7ba      	b.n	816 <Stack_Size+0x16>
                scd->_endbyte2[0] = 0;
     8a0:	f880 9000 	strb.w	r9, [r0]
                scd->_endbyte2[1] = 0;
     8a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
     8a6:	f880 9001 	strb.w	r9, [r0, #1]
                scd->_endbyte2[2] = 0;
     8aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
     8ac:	f880 9002 	strb.w	r9, [r0, #2]
                scd->_endbyte2[3] = 0;
     8b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
     8b2:	e7ea      	b.n	88a <Stack_Size+0x8a>
            scd->byteToSend3 = 0;
     8b4:	f8a4 1056 	strh.w	r1, [r4, #86]	; 0x56
            return SCO_DUMP(scd);
     8b8:	2201      	movs	r2, #1
            scd->dumpPkgCnt = 2;
     8ba:	f8a4 805e 	strh.w	r8, [r4, #94]	; 0x5e
            checkUint16Sum = 0;
     8be:	2300      	movs	r3, #0
            scd->ifContPkg = 1;
     8c0:	f8a4 e060 	strh.w	lr, [r4, #96]	; 0x60
            return SCO_DUMP(scd);
     8c4:	e787      	b.n	7d6 <SCO_DUMP+0x22>
        if (scd->byteToSend3 < (4))
     8c6:	2803      	cmp	r0, #3
     8c8:	dc57      	bgt.n	97a <Stack_Size+0x17a>
     8ca:	b102      	cbz	r2, 8ce <Stack_Size+0xce>
     8cc:	802b      	strh	r3, [r5, #0]
            if (scd->byteToSend3 == 0)
     8ce:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
     8d2:	b21b      	sxth	r3, r3
     8d4:	bb83      	cbnz	r3, 938 <Stack_Size+0x138>
                uint16_t judgeType = (scd->_unit_struct[scd->dumpTarget]._type) & 0xffu;
     8d6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
     8da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
     8dc:	b21b      	sxth	r3, r3
     8de:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
     8e2:	791b      	ldrb	r3, [r3, #4]
                void *tempCommonPtr = (void *)scd->_unit_struct[scd->dumpTarget]._addr;
     8e4:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
                if (judgeType == TYJ_uint16_t)
     8e8:	2b02      	cmp	r3, #2
                void *tempCommonPtr = (void *)scd->_unit_struct[scd->dumpTarget]._addr;
     8ea:	b212      	sxth	r2, r2
     8ec:	f851 0032 	ldr.w	r0, [r1, r2, lsl #3]
                if (judgeType == TYJ_uint16_t)
     8f0:	d108      	bne.n	904 <Stack_Size+0x104>
                    scd->tempBuff = tempPtr[scd->structToSend3];
     8f2:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
     8f6:	b21b      	sxth	r3, r3
     8f8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
                    scd->tempBuff = (uint32_t)tempCommonPtr;
     8fc:	f000 fd0a 	bl	1314 <__aeabi_ui2f>
                    scd->tempBuff = tempPtr[scd->structToSend3];
     900:	6420      	str	r0, [r4, #64]	; 0x40
     902:	e019      	b.n	938 <Stack_Size+0x138>
                else if (judgeType == TYJ_uint32_t)
     904:	2b04      	cmp	r3, #4
     906:	d105      	bne.n	914 <Stack_Size+0x114>
                    scd->tempBuff = tempPtr[scd->structToSend3];
     908:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
     90c:	b21b      	sxth	r3, r3
     90e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
     912:	e7f3      	b.n	8fc <Stack_Size+0xfc>
                else if (judgeType == TYJ_int32_t)
     914:	2b14      	cmp	r3, #20
     916:	d107      	bne.n	928 <Stack_Size+0x128>
                    scd->tempBuff = tempPtr[scd->structToSend3];
     918:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
     91c:	b21b      	sxth	r3, r3
     91e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
                    scd->tempBuff = tempPtr[scd->structToSend3];
     922:	f000 fcfb 	bl	131c <__aeabi_i2f>
     926:	e7eb      	b.n	900 <Stack_Size+0x100>
                else if (judgeType == TYJ_float)
     928:	2b24      	cmp	r3, #36	; 0x24
     92a:	d11e      	bne.n	96a <Stack_Size+0x16a>
                    scd->tempBuff = tempPtr[scd->structToSend3];
     92c:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
     930:	b21b      	sxth	r3, r3
     932:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
     936:	6423      	str	r3, [r4, #64]	; 0x40
            tempPtr = &tempPtr[scd->byteToSend3 >> 1];
     938:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
            if (scd->byteToSend3++ & 0x1)
     93c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
            uint16_t *tempPtr = (uint16_t *)(void *)&(scd->tempBuff);
     940:	f104 0040 	add.w	r0, r4, #64	; 0x40
            if (scd->byteToSend3++ & 0x1)
     944:	b29b      	uxth	r3, r3
     946:	1c59      	adds	r1, r3, #1
     948:	b209      	sxth	r1, r1
     94a:	f013 0f01 	tst.w	r3, #1
            tempPtr = &tempPtr[scd->byteToSend3 >> 1];
     94e:	f342 024e 	sbfx	r2, r2, #1, #15
            if (scd->byteToSend3++ & 0x1)
     952:	f8a4 1056 	strh.w	r1, [r4, #86]	; 0x56
     956:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
                checkUint16Sum += *tempPtr;
     95a:	bf09      	itett	eq
     95c:	882b      	ldrheq	r3, [r5, #0]
                return ((*tempPtr) >> 8) & 0xffu;
     95e:	0a00      	lsrne	r0, r0, #8
                checkUint16Sum += *tempPtr;
     960:	181b      	addeq	r3, r3, r0
     962:	802b      	strheq	r3, [r5, #0]
                return (*tempPtr) & 0xffu;
     964:	bf08      	it	eq
     966:	b2c0      	uxtbeq	r0, r0
     968:	e75e      	b.n	828 <Stack_Size+0x28>
                else if (judgeType == TYJ_function)
     96a:	2b32      	cmp	r3, #50	; 0x32
     96c:	d0c6      	beq.n	8fc <Stack_Size+0xfc>
                    scd->tempBuff = tempPtr[scd->structToSend3];
     96e:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
     972:	b21b      	sxth	r3, r3
     974:	f930 0013 	ldrsh.w	r0, [r0, r3, lsl #1]
     978:	e7d3      	b.n	922 <Stack_Size+0x122>
            scd->byteToSend3 = 0;
     97a:	f8a4 1056 	strh.w	r1, [r4, #86]	; 0x56
            scd->structToSend3++;
     97e:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
            scd->_endbyte2[4] = checkUint16Sum & 0xffu;
     982:	fa5f f983 	uxtb.w	r9, r3
            scd->structToSend3++;
     986:	3001      	adds	r0, #1
     988:	b200      	sxth	r0, r0
     98a:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
            scd->dumpPkgCnt++;
     98e:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
     992:	3001      	adds	r0, #1
     994:	b200      	sxth	r0, r0
     996:	f8a4 005e 	strh.w	r0, [r4, #94]	; 0x5e
            scd->_endbyte2[4] = checkUint16Sum & 0xffu;
     99a:	6b60      	ldr	r0, [r4, #52]	; 0x34
     99c:	f880 9004 	strb.w	r9, [r0, #4]
            scd->_endbyte2[5] = (checkUint16Sum >> 8) & 0xffu;
     9a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
     9a2:	ea4f 2913 	mov.w	r9, r3, lsr #8
     9a6:	f880 9005 	strb.w	r9, [r0, #5]
            return SCO_DUMP(scd);
     9aa:	e714      	b.n	7d6 <SCO_DUMP+0x22>
     9ac:	20000036 	.word	0x20000036

000009b0 <SCO_PRINT>:
static uint16_t SCO_PRINT(struct SCD_CTRL_STRUCT *scd)
{
#define SCO_ENDBYTE_NUM3 2

    // 用判断代替求余
    if (scd->byteToSend4 == 4)
     9b0:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
{
     9b4:	b530      	push	{r4, r5, lr}
    if (scd->byteToSend4 == 4)
     9b6:	b21b      	sxth	r3, r3
     9b8:	2b04      	cmp	r3, #4
    {
        scd->byteToSend4 = 0;
     9ba:	bf04      	itt	eq
     9bc:	2300      	moveq	r3, #0
     9be:	f8a0 3066 	strheq.w	r3, [r0, #102]	; 0x66
    }
    if (scd->byteToSend4 == 0)
     9c2:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
     9c6:	b219      	sxth	r1, r3
     9c8:	bb39      	cbnz	r1, a1a <SCO_PRINT+0x6a>
    {
        // 规划帧
        if (scd->byteToPrint < scd->isPrintBusyFlg)
     9ca:	f8b0 4064 	ldrh.w	r4, [r0, #100]	; 0x64
     9ce:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
     9d2:	b224      	sxth	r4, r4
     9d4:	b212      	sxth	r2, r2
     9d6:	4294      	cmp	r4, r2
     9d8:	da2b      	bge.n	a32 <SCO_PRINT+0x82>
        {
            scd->_endbyte3[0] = scd->_printBuff[scd->byteToPrint++];
     9da:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
     9de:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
     9e0:	b21c      	sxth	r4, r3
     9e2:	3301      	adds	r3, #1
     9e4:	b21b      	sxth	r3, r3
     9e6:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
     9ea:	5d2b      	ldrb	r3, [r5, r4]
     9ec:	6b82      	ldr	r2, [r0, #56]	; 0x38
     9ee:	b2db      	uxtb	r3, r3
     9f0:	7013      	strb	r3, [r2, #0]
            // 发完了
            scd->byteToPrint = 0;
            scd->isPrintBusyFlg = 0;
            return 0x100u;
        }
        if (scd->byteToPrint < scd->isPrintBusyFlg)
     9f2:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
     9f6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
     9fa:	b212      	sxth	r2, r2
     9fc:	b21b      	sxth	r3, r3
     9fe:	429a      	cmp	r2, r3
     a00:	6b82      	ldr	r2, [r0, #56]	; 0x38
     a02:	da14      	bge.n	a2e <SCO_PRINT+0x7e>
        {
            scd->_endbyte3[1] = scd->_printBuff[scd->byteToPrint++];
     a04:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
     a08:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
     a0a:	b219      	sxth	r1, r3
     a0c:	3301      	adds	r3, #1
     a0e:	b21b      	sxth	r3, r3
     a10:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
     a14:	5c63      	ldrb	r3, [r4, r1]
     a16:	b2db      	uxtb	r3, r3
     a18:	7053      	strb	r3, [r2, #1]
            // 第二字节，没东西但还是要发一帧
            scd->_endbyte3[1] = 0;
        }
        return scd->_endbyte3[scd->byteToSend4++];
    }
    return scd->_endbyte3[scd->byteToSend4++];
     a1a:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
     a1e:	6b81      	ldr	r1, [r0, #56]	; 0x38
     a20:	b21a      	sxth	r2, r3
     a22:	3301      	adds	r3, #1
     a24:	b21b      	sxth	r3, r3
     a26:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
     a2a:	5c88      	ldrb	r0, [r1, r2]
     a2c:	e007      	b.n	a3e <SCO_PRINT+0x8e>
            scd->_endbyte3[1] = 0;
     a2e:	7051      	strb	r1, [r2, #1]
        return scd->_endbyte3[scd->byteToSend4++];
     a30:	e7f3      	b.n	a1a <SCO_PRINT+0x6a>
            scd->byteToPrint = 0;
     a32:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
            scd->isPrintBusyFlg = 0;
     a36:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
            return 0x100u;
     a3a:	f44f 7080 	mov.w	r0, #256	; 0x100
}
     a3e:	bd30      	pop	{r4, r5, pc}

00000a40 <_cz_strtoxl.constprop.0>:
static uint32_t _cz_strtoxl(const char *nptr, const char **endptr, int ibase, int flags)
     a40:	4603      	mov	r3, r0
     a42:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (endptr != NULL)
     a44:	b101      	cbz	r1, a48 <_cz_strtoxl.constprop.0+0x8>
        *endptr = nptr;
     a46:	6008      	str	r0, [r1, #0]
    c = *p++;
     a48:	f813 4b01 	ldrb.w	r4, [r3], #1
    while (cz_isspace((int)(unsigned char)c))
     a4c:	4e2c      	ldr	r6, [pc, #176]	; (b00 <_cz_strtoxl.constprop.0+0xc0>)
     a4e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
     a52:	f012 0208 	ands.w	r2, r2, #8
     a56:	d121      	bne.n	a9c <_cz_strtoxl.constprop.0+0x5c>
    if (c == '+')
     a58:	2c2b      	cmp	r4, #43	; 0x2b
     a5a:	d14a      	bne.n	af2 <_cz_strtoxl.constprop.0+0xb2>
        c = *p++;
     a5c:	f813 4b01 	ldrb.w	r4, [r3], #1
    if (c == '-')
     a60:	2c2d      	cmp	r4, #45	; 0x2d
     a62:	d102      	bne.n	a6a <_cz_strtoxl.constprop.0+0x2a>
        flags |= IFL_NEG;
     a64:	2201      	movs	r2, #1
        c = *p++;
     a66:	f813 4b01 	ldrb.w	r4, [r3], #1
    if (c == '+')
     a6a:	2c2b      	cmp	r4, #43	; 0x2b
        c = *p++;
     a6c:	bf08      	it	eq
     a6e:	f813 4b01 	ldrbeq.w	r4, [r3], #1
    if (c == '-')
     a72:	2000      	movs	r0, #0
            number = number * ((uint32_t)ibase) + digval;
     a74:	f04f 0c0a 	mov.w	ip, #10
        if (number < maxval || (number == maxval &&
     a78:	4f22      	ldr	r7, [pc, #136]	; (b04 <_cz_strtoxl.constprop.0+0xc4>)
        if (cz_isdigit((int)(unsigned char)c))
     a7a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
     a7e:	f015 0f04 	tst.w	r5, #4
     a82:	d00e      	beq.n	aa2 <_cz_strtoxl.constprop.0+0x62>
            digval = c - '0';
     a84:	3c30      	subs	r4, #48	; 0x30
        if (digval >= (uint32_t)ibase)
     a86:	2c09      	cmp	r4, #9
     a88:	d815      	bhi.n	ab6 <_cz_strtoxl.constprop.0+0x76>
        if (number < maxval || (number == maxval &&
     a8a:	42b8      	cmp	r0, r7
     a8c:	d80f      	bhi.n	aae <_cz_strtoxl.constprop.0+0x6e>
            number = number * ((uint32_t)ibase) + digval;
     a8e:	fb0c 4000 	mla	r0, ip, r0, r4
        flags |= IFL_READDIGIT;
     a92:	f042 0202 	orr.w	r2, r2, #2
        c = *p++;
     a96:	f813 4b01 	ldrb.w	r4, [r3], #1
        if (cz_isdigit((int)(unsigned char)c))
     a9a:	e7ee      	b.n	a7a <_cz_strtoxl.constprop.0+0x3a>
        c = *p++;
     a9c:	f813 4b01 	ldrb.w	r4, [r3], #1
     aa0:	e7d5      	b.n	a4e <_cz_strtoxl.constprop.0+0xe>
        else if (cz_isalpha((int)(unsigned char)c))
     aa2:	07ac      	lsls	r4, r5, #30
     aa4:	d007      	beq.n	ab6 <_cz_strtoxl.constprop.0+0x76>
            digval = (char)cz_toupper((unsigned char)c) - 'A' + 10;
     aa6:	f3c5 2407 	ubfx	r4, r5, #8, #8
     aaa:	3c37      	subs	r4, #55	; 0x37
     aac:	e7eb      	b.n	a86 <_cz_strtoxl.constprop.0+0x46>
            flags |= IFL_OVERFLOW;
     aae:	f042 0206 	orr.w	r2, r2, #6
            if (endptr == NULL)
     ab2:	2900      	cmp	r1, #0
     ab4:	d1ef      	bne.n	a96 <_cz_strtoxl.constprop.0+0x56>
    if (!(flags & IFL_READDIGIT))
     ab6:	f012 0502 	ands.w	r5, r2, #2
              (((flags & IFL_NEG) && (number > limit)) ||
     aba:	f002 0401 	and.w	r4, r2, #1
    if (!(flags & IFL_READDIGIT))
     abe:	d104      	bne.n	aca <_cz_strtoxl.constprop.0+0x8a>
        if (endptr)
     ac0:	b9a9      	cbnz	r1, aee <_cz_strtoxl.constprop.0+0xae>
        number = 0;
     ac2:	4608      	mov	r0, r1
    if (flags & IFL_NEG)
     ac4:	b104      	cbz	r4, ac8 <_cz_strtoxl.constprop.0+0x88>
        number = (uint32_t)(-(int32_t)number);
     ac6:	4240      	negs	r0, r0
}
     ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if ((flags & IFL_OVERFLOW) ||
     aca:	0752      	lsls	r2, r2, #29
     acc:	d407      	bmi.n	ade <_cz_strtoxl.constprop.0+0x9e>
             (!(flags & IFL_UNSIGNED) &&
     ace:	b124      	cbz	r4, ada <_cz_strtoxl.constprop.0+0x9a>
              (((flags & IFL_NEG) && (number > limit)) ||
     ad0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     ad4:	d803      	bhi.n	ade <_cz_strtoxl.constprop.0+0x9e>
    if (endptr)
     ad6:	b939      	cbnz	r1, ae8 <_cz_strtoxl.constprop.0+0xa8>
     ad8:	e7f5      	b.n	ac6 <_cz_strtoxl.constprop.0+0x86>
               (!(flags & IFL_NEG) && (number > limit - 1)))))
     ada:	2800      	cmp	r0, #0
     adc:	da0c      	bge.n	af8 <_cz_strtoxl.constprop.0+0xb8>
        else if (flags & IFL_NEG)
     ade:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
     ae2:	3801      	subs	r0, #1
    if (endptr)
     ae4:	2900      	cmp	r1, #0
     ae6:	d0ed      	beq.n	ac4 <_cz_strtoxl.constprop.0+0x84>
    --p;
     ae8:	3b01      	subs	r3, #1
        *endptr = p;
     aea:	600b      	str	r3, [r1, #0]
     aec:	e7ea      	b.n	ac4 <_cz_strtoxl.constprop.0+0x84>
        number = 0;
     aee:	4628      	mov	r0, r5
     af0:	e7fa      	b.n	ae8 <_cz_strtoxl.constprop.0+0xa8>
    if (c == '-')
     af2:	2c2d      	cmp	r4, #45	; 0x2d
     af4:	d1bd      	bne.n	a72 <_cz_strtoxl.constprop.0+0x32>
     af6:	e7b5      	b.n	a64 <_cz_strtoxl.constprop.0+0x24>
    if (endptr)
     af8:	2900      	cmp	r1, #0
     afa:	d1f5      	bne.n	ae8 <_cz_strtoxl.constprop.0+0xa8>
     afc:	e7e4      	b.n	ac8 <_cz_strtoxl.constprop.0+0x88>
     afe:	bf00      	nop
     b00:	00001468 	.word	0x00001468
     b04:	19999999 	.word	0x19999999

00000b08 <cz_atol>:
    return (int32_t)_cz_strtoxl(nptr, 0, 10, 0);
     b08:	2100      	movs	r1, #0
     b0a:	f7ff bf99 	b.w	a40 <_cz_strtoxl.constprop.0>

00000b0e <SCD_CMD_CONF>:
{
     b0e:	b538      	push	{r3, r4, r5, lr}
    if (targetNum >= 0 && targetNum < SCD_SEND_TAB_SIZE)
     b10:	b293      	uxth	r3, r2
     b12:	2b13      	cmp	r3, #19
{
     b14:	4605      	mov	r5, r0
     b16:	4614      	mov	r4, r2
     b18:	4608      	mov	r0, r1
    if (targetNum >= 0 && targetNum < SCD_SEND_TAB_SIZE)
     b1a:	d804      	bhi.n	b26 <SCD_CMD_CONF+0x18>
        int varNum = cz_atol((const char *)paraPtr);
     b1c:	f7ff fff4 	bl	b08 <cz_atol>
            scd->structToSendTab[targetNum] = varNum;
     b20:	b200      	sxth	r0, r0
     b22:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
}
     b26:	bd38      	pop	{r3, r4, r5, pc}

00000b28 <SCD_CMD_CHG>:
{
     b28:	b510      	push	{r4, lr}
     b2a:	4604      	mov	r4, r0
    int p_num = cz_atol((const char *)paraPtr);
     b2c:	4608      	mov	r0, r1
     b2e:	f7ff ffeb 	bl	b08 <cz_atol>
    if (p_num >= 0 && p_num < SCD_PROTOCOL_NUM)
     b32:	2804      	cmp	r0, #4
        scd->sco_protocol_num_next = p_num;
     b34:	bf9c      	itt	ls
     b36:	b203      	sxthls	r3, r0
     b38:	f8a4 3050 	strhls.w	r3, [r4, #80]	; 0x50
}
     b3c:	bd10      	pop	{r4, pc}

00000b3e <SCD_CMD_DUMP>:
{
     b3e:	b510      	push	{r4, lr}
     b40:	4604      	mov	r4, r0
    scd->dumpTarget = targetNum;
     b42:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    int p_num = cz_atol((const char *)paraPtr);
     b46:	4608      	mov	r0, r1
     b48:	f7ff ffde 	bl	b08 <cz_atol>
    scd->dumpNumCnt = p_num;
     b4c:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
     b50:	bfa8      	it	ge
     b52:	f44f 40fa 	movge.w	r0, #32000	; 0x7d00
     b56:	2801      	cmp	r0, #1
     b58:	bfb8      	it	lt
     b5a:	2001      	movlt	r0, #1
     b5c:	b203      	sxth	r3, r0
     b5e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
     b62:	bd10      	pop	{r4, pc}

00000b64 <SCD_CMD_CALL>:
{
     b64:	b570      	push	{r4, r5, r6, lr}
    uint16_t judgeType = (scd->_unit_struct[targetNum]._type) & 0xffu;
     b66:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
{
     b68:	4614      	mov	r4, r2
    uint16_t judgeType = (scd->_unit_struct[targetNum]._type) & 0xffu;
     b6a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    if (judgeType == TYJ_function)
     b6e:	791b      	ldrb	r3, [r3, #4]
     b70:	2b32      	cmp	r3, #50	; 0x32
     b72:	d107      	bne.n	b84 <SCD_CMD_CALL+0x20>
        int para = cz_atol((const char *)paraPtr);
     b74:	4608      	mov	r0, r1
     b76:	f7ff ffc7 	bl	b08 <cz_atol>
        (*funcPtr)(para);
     b7a:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
}
     b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (*funcPtr)(para);
     b82:	4718      	bx	r3
}
     b84:	bd70      	pop	{r4, r5, r6, pc}
	...

00000b88 <SCD_CMD_SET>:
{
     b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_float)
     b8c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
{
     b8e:	460d      	mov	r5, r1
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_float)
     b90:	eb06 07c2 	add.w	r7, r6, r2, lsl #3
     b94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
{
     b98:	4614      	mov	r4, r2
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_float)
     b9a:	2b24      	cmp	r3, #36	; 0x24
{
     b9c:	b087      	sub	sp, #28
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_float)
     b9e:	f040 8099 	bne.w	cd4 <SCD_CMD_SET+0x14c>
        volatile float *xtemp = (float *)(void *)SCD_DATA_STRUCT_tab[targetNum]._addr;
     ba2:	f856 3032 	ldr.w	r3, [r6, r2, lsl #3]
    int sign = 1;
     ba6:	f04f 0a01 	mov.w	sl, #1
        volatile float *xtemp = (float *)(void *)SCD_DATA_STRUCT_tab[targetNum]._addr;
     baa:	9301      	str	r3, [sp, #4]
    const char *nextCharPtr = NULL;
     bac:	2300      	movs	r3, #0
     bae:	460a      	mov	r2, r1
    while (!cz_isalnum((int)(unsigned char)(*chrIn)))
     bb0:	f8df c158 	ldr.w	ip, [pc, #344]	; d0c <SCD_CMD_SET+0x184>
    const char *nextCharPtr = NULL;
     bb4:	9305      	str	r3, [sp, #20]
    while (!cz_isalnum((int)(unsigned char)(*chrIn)))
     bb6:	4610      	mov	r0, r2
     bb8:	f812 3b01 	ldrb.w	r3, [r2], #1
     bbc:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
     bc0:	f011 0f07 	tst.w	r1, #7
     bc4:	d051      	beq.n	c6a <SCD_CMD_SET+0xe2>
    int32_t intPart = _cz_strtoxl(chrIn, &nextCharPtr, 10, 0);
     bc6:	a905      	add	r1, sp, #20
     bc8:	f7ff ff3a 	bl	a40 <_cz_strtoxl.constprop.0>
    if (*nextCharPtr == '.')
     bcc:	9b05      	ldr	r3, [sp, #20]
    int32_t intPart = _cz_strtoxl(chrIn, &nextCharPtr, 10, 0);
     bce:	4683      	mov	fp, r0
    if (*nextCharPtr == '.')
     bd0:	781a      	ldrb	r2, [r3, #0]
     bd2:	2a2e      	cmp	r2, #46	; 0x2e
     bd4:	d167      	bne.n	ca6 <SCD_CMD_SET+0x11e>
        chrIn = nextCharPtr + 1;
     bd6:	f103 0901 	add.w	r9, r3, #1
        int32_t decInt = _cz_strtoxl(chrIn, &nextCharPtr, 10, 0);
     bda:	4648      	mov	r0, r9
     bdc:	f7ff ff30 	bl	a40 <_cz_strtoxl.constprop.0>
        decPart = _atof_pow10((float)decInt, -lenth);
     be0:	f000 fb9c 	bl	131c <__aeabi_i2f>
     be4:	9a05      	ldr	r2, [sp, #20]
     be6:	4680      	mov	r8, r0
     be8:	eba9 0902 	sub.w	r9, r9, r2
    while (exp > 0)
     bec:	464a      	mov	r2, r9
        data *= 10.0f;
     bee:	4948      	ldr	r1, [pc, #288]	; (d10 <SCD_CMD_SET+0x188>)
    while (exp > 0)
     bf0:	2a00      	cmp	r2, #0
     bf2:	dc45      	bgt.n	c80 <SCD_CMD_SET+0xf8>
     bf4:	f1b9 0f00 	cmp.w	r9, #0
        data *= 0.1f;
     bf8:	4946      	ldr	r1, [pc, #280]	; (d14 <SCD_CMD_SET+0x18c>)
     bfa:	bfa8      	it	ge
     bfc:	eba9 0909 	subge.w	r9, r9, r9
    while (exp < 0)
     c00:	f1b9 0f00 	cmp.w	r9, #0
     c04:	d146      	bne.n	c94 <SCD_CMD_SET+0x10c>
    if (*nextCharPtr == 'e' || *nextCharPtr == 'E')
     c06:	9805      	ldr	r0, [sp, #20]
     c08:	7802      	ldrb	r2, [r0, #0]
     c0a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
     c0e:	2a45      	cmp	r2, #69	; 0x45
     c10:	d14c      	bne.n	cac <SCD_CMD_SET+0x124>
        ePart = _cz_strtoxl(chrIn, &nextCharPtr, 10, 0);
     c12:	a905      	add	r1, sp, #20
     c14:	3001      	adds	r0, #1
     c16:	f7ff ff13 	bl	a40 <_cz_strtoxl.constprop.0>
     c1a:	4681      	mov	r9, r0
        ret = intPart + decPart;
     c1c:	4658      	mov	r0, fp
     c1e:	f000 fb7d 	bl	131c <__aeabi_i2f>
    if (sign == 1)
     c22:	f1ba 0f01 	cmp.w	sl, #1
        ret = intPart + decPart;
     c26:	4601      	mov	r1, r0
    if (sign == 1)
     c28:	d143      	bne.n	cb2 <SCD_CMD_SET+0x12a>
        ret = intPart + decPart;
     c2a:	4640      	mov	r0, r8
     c2c:	f000 fac2 	bl	11b4 <__addsf3>
    int ePart = 0;
     c30:	46ca      	mov	sl, r9
        data *= 10.0f;
     c32:	f8df b0dc 	ldr.w	fp, [pc, #220]	; d10 <SCD_CMD_SET+0x188>
    while (exp > 0)
     c36:	f1ba 0f00 	cmp.w	sl, #0
     c3a:	dc3f      	bgt.n	cbc <SCD_CMD_SET+0x134>
     c3c:	f1b9 0f00 	cmp.w	r9, #0
        data *= 0.1f;
     c40:	f8df a0d0 	ldr.w	sl, [pc, #208]	; d14 <SCD_CMD_SET+0x18c>
     c44:	bfa8      	it	ge
     c46:	eba9 0909 	subge.w	r9, r9, r9
    while (exp < 0)
     c4a:	f1b9 0f00 	cmp.w	r9, #0
     c4e:	d13b      	bne.n	cc8 <SCD_CMD_SET+0x140>
        *xtemp = atof_tyj((const char *)paraPtr);
     c50:	9b01      	ldr	r3, [sp, #4]
     c52:	6018      	str	r0, [r3, #0]
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_uint32_t)
     c54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
     c58:	2b04      	cmp	r3, #4
     c5a:	d152      	bne.n	d02 <SCD_CMD_SET+0x17a>
        *xtemp = cz_atol((const char *)paraPtr);
     c5c:	4628      	mov	r0, r5
        volatile int32_t *xtemp = (int32_t *)(void *)SCD_DATA_STRUCT_tab[targetNum]._addr;
     c5e:	f856 4034 	ldr.w	r4, [r6, r4, lsl #3]
        *xtemp = cz_atol((const char *)paraPtr);
     c62:	f7ff ff51 	bl	b08 <cz_atol>
     c66:	6020      	str	r0, [r4, #0]
}
     c68:	e04d      	b.n	d06 <SCD_CMD_SET+0x17e>
        if (cz_ispunct((int)(unsigned char)(*chrIn)))
     c6a:	06c9      	lsls	r1, r1, #27
     c6c:	d5a3      	bpl.n	bb6 <SCD_CMD_SET+0x2e>
            if (*chrIn == '-')
     c6e:	2b2d      	cmp	r3, #45	; 0x2d
     c70:	d102      	bne.n	c78 <SCD_CMD_SET+0xf0>
                sign = -sign;
     c72:	f1ca 0a00 	rsb	sl, sl, #0
     c76:	e79e      	b.n	bb6 <SCD_CMD_SET+0x2e>
            else if (*chrIn == '+')
     c78:	2b2b      	cmp	r3, #43	; 0x2b
     c7a:	d09c      	beq.n	bb6 <SCD_CMD_SET+0x2e>
                return 0;
     c7c:	2000      	movs	r0, #0
     c7e:	e7e7      	b.n	c50 <SCD_CMD_SET+0xc8>
        data *= 10.0f;
     c80:	4640      	mov	r0, r8
     c82:	e9cd 1202 	strd	r1, r2, [sp, #8]
     c86:	f000 f9db 	bl	1040 <__aeabi_fmul>
        --exp;
     c8a:	9a03      	ldr	r2, [sp, #12]
        data *= 10.0f;
     c8c:	4680      	mov	r8, r0
        --exp;
     c8e:	9902      	ldr	r1, [sp, #8]
     c90:	3a01      	subs	r2, #1
     c92:	e7ad      	b.n	bf0 <SCD_CMD_SET+0x68>
        data *= 0.1f;
     c94:	4640      	mov	r0, r8
     c96:	9102      	str	r1, [sp, #8]
     c98:	f000 f9d2 	bl	1040 <__aeabi_fmul>
        ++exp;
     c9c:	f109 0901 	add.w	r9, r9, #1
        data *= 0.1f;
     ca0:	4680      	mov	r8, r0
        ++exp;
     ca2:	9902      	ldr	r1, [sp, #8]
     ca4:	e7ac      	b.n	c00 <SCD_CMD_SET+0x78>
    float decPart = 0;
     ca6:	f04f 0800 	mov.w	r8, #0
     caa:	e7ac      	b.n	c06 <SCD_CMD_SET+0x7e>
    int ePart = 0;
     cac:	f04f 0900 	mov.w	r9, #0
     cb0:	e7b4      	b.n	c1c <SCD_CMD_SET+0x94>
        ret = -decPart - intPart;
     cb2:	f108 4000 	add.w	r0, r8, #2147483648	; 0x80000000
     cb6:	f000 fa7b 	bl	11b0 <__aeabi_fsub>
     cba:	e7b9      	b.n	c30 <SCD_CMD_SET+0xa8>
        data *= 10.0f;
     cbc:	4659      	mov	r1, fp
     cbe:	f000 f9bf 	bl	1040 <__aeabi_fmul>
        --exp;
     cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
     cc6:	e7b6      	b.n	c36 <SCD_CMD_SET+0xae>
        data *= 0.1f;
     cc8:	4651      	mov	r1, sl
     cca:	f000 f9b9 	bl	1040 <__aeabi_fmul>
        ++exp;
     cce:	f109 0901 	add.w	r9, r9, #1
     cd2:	e7ba      	b.n	c4a <SCD_CMD_SET+0xc2>
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_uint16_t)
     cd4:	2b02      	cmp	r3, #2
     cd6:	d107      	bne.n	ce8 <SCD_CMD_SET+0x160>
        *xtemp = cz_atol((const char *)paraPtr);
     cd8:	4608      	mov	r0, r1
        volatile uint16_t *xtemp = (uint16_t *)(void *)SCD_DATA_STRUCT_tab[targetNum]._addr;
     cda:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
        *xtemp = cz_atol((const char *)paraPtr);
     cde:	f7ff ff13 	bl	b08 <cz_atol>
     ce2:	b280      	uxth	r0, r0
     ce4:	f8a8 0000 	strh.w	r0, [r8]
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_int16_t)
     ce8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
     cec:	2b12      	cmp	r3, #18
     cee:	d1b1      	bne.n	c54 <SCD_CMD_SET+0xcc>
        *xtemp = cz_atol((const char *)paraPtr);
     cf0:	4628      	mov	r0, r5
        volatile int16_t *xtemp = (int16_t *)(void *)SCD_DATA_STRUCT_tab[targetNum]._addr;
     cf2:	f856 8034 	ldr.w	r8, [r6, r4, lsl #3]
        *xtemp = cz_atol((const char *)paraPtr);
     cf6:	f7ff ff07 	bl	b08 <cz_atol>
     cfa:	b200      	sxth	r0, r0
     cfc:	f8a8 0000 	strh.w	r0, [r8]
     d00:	e7a8      	b.n	c54 <SCD_CMD_SET+0xcc>
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_int32_t)
     d02:	2b14      	cmp	r3, #20
     d04:	d0aa      	beq.n	c5c <SCD_CMD_SET+0xd4>
}
     d06:	b007      	add	sp, #28
     d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d0c:	00001468 	.word	0x00001468
     d10:	41200000 	.word	0x41200000
     d14:	3dcccccd 	.word	0x3dcccccd

00000d18 <SCD_Rev1Byte>:
    if (data == '!')
     d18:	2921      	cmp	r1, #33	; 0x21
{
     d1a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d1e:	4604      	mov	r4, r0
    volatile unsigned char(*recBuff)[SCD_REVBUFF_SIZE] = scd->_recBuff;
     d20:	6a85      	ldr	r5, [r0, #40]	; 0x28
    if (data == '!')
     d22:	f040 80a6 	bne.w	e72 <SCD_Rev1Byte+0x15a>
        if (scd->bytesRec > 0)
     d26:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
     d2a:	b21b      	sxth	r3, r3
     d2c:	2b00      	cmp	r3, #0
     d2e:	dc3b      	bgt.n	da8 <SCD_Rev1Byte+0x90>
}
     d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (recBuff[0][ii] != recBuff[1][ii])
     d34:	5ce9      	ldrb	r1, [r5, r3]
     d36:	442b      	add	r3, r5
     d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
     d3c:	3001      	adds	r0, #1
                    isSame = 0;
     d3e:	4299      	cmp	r1, r3
     d40:	bf18      	it	ne
     d42:	2200      	movne	r2, #0
            for (int16_t ii = 0; ii < scd->bytesRec; ii++)
     d44:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
     d48:	b203      	sxth	r3, r0
     d4a:	b209      	sxth	r1, r1
     d4c:	4299      	cmp	r1, r3
     d4e:	dcf1      	bgt.n	d34 <SCD_Rev1Byte+0x1c>
            if (isSame)
     d50:	2a00      	cmp	r2, #0
     d52:	f000 8083 	beq.w	e5c <SCD_Rev1Byte+0x144>
                recBuff[0][scd->bytesRec] = 0;
     d56:	f04f 0c00 	mov.w	ip, #0
     d5a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    while (!cz_isalnum((int)(unsigned char)(recBuff[0][xstart])))
     d5e:	4e4d      	ldr	r6, [pc, #308]	; (e94 <SCD_Rev1Byte+0x17c>)
                recBuff[0][scd->bytesRec] = 0;
     d60:	b21b      	sxth	r3, r3
     d62:	f805 c003 	strb.w	ip, [r5, r3]
    volatile unsigned char(*recBuff)[SCD_REVBUFF_SIZE] = scd->_recBuff;
     d66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    while (!cz_isalnum((int)(unsigned char)(recBuff[0][xstart])))
     d68:	f811 300c 	ldrb.w	r3, [r1, ip]
     d6c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
     d70:	075f      	lsls	r7, r3, #29
     d72:	d01c      	beq.n	dae <SCD_Rev1Byte+0x96>
    if (!cz_isalpha((int)(unsigned char)(recBuff[0][xstart])))
     d74:	f811 300c 	ldrb.w	r3, [r1, ip]
     d78:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
     d7c:	0798      	lsls	r0, r3, #30
     d7e:	d01e      	beq.n	dbe <SCD_Rev1Byte+0xa6>
     d80:	2000      	movs	r0, #0
     d82:	fa0f fe80 	sxth.w	lr, r0
    while (cz_isalpha((int)(unsigned char)(recBuff[0][cmdLen + xstart])))
     d86:	eb0e 020c 	add.w	r2, lr, ip
     d8a:	5c8a      	ldrb	r2, [r1, r2]
     d8c:	b283      	uxth	r3, r0
     d8e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
     d92:	3001      	adds	r0, #1
     d94:	f012 0203 	ands.w	r2, r2, #3
     d98:	d1f3      	bne.n	d82 <SCD_Rev1Byte+0x6a>
            if (recBuff[0][jj + xstart] != SCD_CMD_TAB[ii][jj])
     d9a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; e98 <SCD_Rev1Byte+0x180>
                isSame = 0;
     d9e:	2000      	movs	r0, #0
        int16_t isSame = 1;
     da0:	f04f 0801 	mov.w	r8, #1
     da4:	b217      	sxth	r7, r2
     da6:	e020      	b.n	dea <SCD_Rev1Byte+0xd2>
     da8:	2000      	movs	r0, #0
            uint16_t isSame = 1;
     daa:	2201      	movs	r2, #1
     dac:	e7ca      	b.n	d44 <SCD_Rev1Byte+0x2c>
        xstart++;
     dae:	f10c 0c01 	add.w	ip, ip, #1
     db2:	fa0f fc8c 	sxth.w	ip, ip
        if (recBuff[0][xstart] == 0)
     db6:	f811 300c 	ldrb.w	r3, [r1, ip]
     dba:	2b00      	cmp	r3, #0
     dbc:	d1d4      	bne.n	d68 <SCD_Rev1Byte+0x50>
                scd->bufNum = 0;
     dbe:	2300      	movs	r3, #0
     dc0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
                recBuff[1][0] = 0;
     dc4:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
            scd->bytesRec = 0;
     dc8:	2300      	movs	r3, #0
     dca:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
     dce:	e7af      	b.n	d30 <SCD_Rev1Byte+0x18>
            if (recBuff[0][jj + xstart] != SCD_CMD_TAB[ii][jj])
     dd0:	f859 b022 	ldr.w	fp, [r9, r2, lsl #2]
     dd4:	eb0c 0a00 	add.w	sl, ip, r0
     dd8:	f81b b000 	ldrb.w	fp, [fp, r0]
     ddc:	f811 a00a 	ldrb.w	sl, [r1, sl]
     de0:	3001      	adds	r0, #1
                isSame = 0;
     de2:	45d3      	cmp	fp, sl
     de4:	bf18      	it	ne
     de6:	f04f 0800 	movne.w	r8, #0
        for (int16_t jj = 0; jj < cmdLen; jj++)
     dea:	fa0f fa80 	sxth.w	sl, r0
     dee:	45d6      	cmp	lr, sl
     df0:	dcee      	bgt.n	dd0 <SCD_Rev1Byte+0xb8>
        if (isSame)
     df2:	f1b8 0f00 	cmp.w	r8, #0
     df6:	d104      	bne.n	e02 <SCD_Rev1Byte+0xea>
    for (int16_t ii = 0; ii < SCD_CMD_NUM; ii++)
     df8:	3201      	adds	r2, #1
     dfa:	2a05      	cmp	r2, #5
     dfc:	d1cf      	bne.n	d9e <SCD_Rev1Byte+0x86>
    int16_t cmd2exec = -1;
     dfe:	f04f 37ff 	mov.w	r7, #4294967295
    int16_t ptr = cmdLen + xstart;
     e02:	4463      	add	r3, ip
     e04:	b21b      	sxth	r3, r3
    if (!cz_isdigit((int)(unsigned char)(recBuff[0][ptr])))
     e06:	5cca      	ldrb	r2, [r1, r3]
     e08:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
     e0c:	0752      	lsls	r2, r2, #29
     e0e:	d5d6      	bpl.n	dbe <SCD_Rev1Byte+0xa6>
    int16_t targetNum = 0;
     e10:	2200      	movs	r2, #0
    while (cz_isdigit((int)(unsigned char)(recBuff[0][ptr])))
     e12:	5cc8      	ldrb	r0, [r1, r3]
     e14:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
     e18:	f010 0f04 	tst.w	r0, #4
        targetNum = targetNum * 10 + recBuff[0][ptr] - '0';
     e1c:	5cc8      	ldrb	r0, [r1, r3]
    while (cz_isdigit((int)(unsigned char)(recBuff[0][ptr])))
     e1e:	d114      	bne.n	e4a <SCD_Rev1Byte+0x132>
    if (recBuff[0][ptr] != '#')
     e20:	2823      	cmp	r0, #35	; 0x23
     e22:	d1cc      	bne.n	dbe <SCD_Rev1Byte+0xa6>
    if (cmd2exec >= 0 && cmd2exec < SCD_CMD_NUM && targetNum < scd->structNum && targetNum >= 0)
     e24:	b2b8      	uxth	r0, r7
     e26:	2804      	cmp	r0, #4
     e28:	d8c9      	bhi.n	dbe <SCD_Rev1Byte+0xa6>
     e2a:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
     e2e:	b200      	sxth	r0, r0
     e30:	4282      	cmp	r2, r0
     e32:	dac4      	bge.n	dbe <SCD_Rev1Byte+0xa6>
     e34:	2a00      	cmp	r2, #0
     e36:	dbc2      	blt.n	dbe <SCD_Rev1Byte+0xa6>
        (*SCD_CMD_FCNS[cmd2exec])(scd, &recBuff[0][ptr], targetNum);
     e38:	4818      	ldr	r0, [pc, #96]	; (e9c <SCD_Rev1Byte+0x184>)
    ptr++;
     e3a:	3301      	adds	r3, #1
        (*SCD_CMD_FCNS[cmd2exec])(scd, &recBuff[0][ptr], targetNum);
     e3c:	b21b      	sxth	r3, r3
     e3e:	f850 6027 	ldr.w	r6, [r0, r7, lsl #2]
     e42:	4419      	add	r1, r3
     e44:	4620      	mov	r0, r4
     e46:	47b0      	blx	r6
     e48:	e7b9      	b.n	dbe <SCD_Rev1Byte+0xa6>
        targetNum = targetNum * 10 + recBuff[0][ptr] - '0';
     e4a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     e4e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
     e52:	3830      	subs	r0, #48	; 0x30
     e54:	3301      	adds	r3, #1
     e56:	b202      	sxth	r2, r0
        ptr++;
     e58:	b21b      	sxth	r3, r3
     e5a:	e7da      	b.n	e12 <SCD_Rev1Byte+0xfa>
                if (scd->bufNum)
     e5c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
     e60:	b21b      	sxth	r3, r3
     e62:	b113      	cbz	r3, e6a <SCD_Rev1Byte+0x152>
                    scd->bufNum = 0;
     e64:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
     e68:	e7ae      	b.n	dc8 <SCD_Rev1Byte+0xb0>
                    scd->bufNum = 1;
     e6a:	2301      	movs	r3, #1
     e6c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
     e70:	e7aa      	b.n	dc8 <SCD_Rev1Byte+0xb0>
        recBuff[scd->bufNum][scd->bytesRec++] = data;
     e72:	2228      	movs	r2, #40	; 0x28
     e74:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
     e78:	b2c9      	uxtb	r1, r1
     e7a:	b21b      	sxth	r3, r3
     e7c:	fb02 5503 	mla	r5, r2, r3, r5
     e80:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
     e84:	b21a      	sxth	r2, r3
     e86:	3301      	adds	r3, #1
     e88:	b21b      	sxth	r3, r3
     e8a:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
     e8e:	54a9      	strb	r1, [r5, r2]
}
     e90:	e74e      	b.n	d30 <SCD_Rev1Byte+0x18>
     e92:	bf00      	nop
     e94:	00001468 	.word	0x00001468
     e98:	00001440 	.word	0x00001440
     e9c:	0000142c 	.word	0x0000142c

00000ea0 <scd_send1Byte>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(scd_send1Byte, MEM_MACRO);
#endif
uint16_t scd_send1Byte(struct SCD_CTRL_STRUCT *scd)
{
     ea0:	b538      	push	{r3, r4, r5, lr}
    uint16_t ret;
    ret = SCD_PROTOCOL_FCNS[scd->sco_protocol_num](scd);
     ea2:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
     ea6:	4d0e      	ldr	r5, [pc, #56]	; (ee0 <scd_send1Byte+0x40>)
     ea8:	b21b      	sxth	r3, r3
     eaa:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
{
     eae:	4604      	mov	r4, r0
    ret = SCD_PROTOCOL_FCNS[scd->sco_protocol_num](scd);
     eb0:	4798      	blx	r3
    if (ret & (((uint16_t)0xffu) << 8))
     eb2:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
     eb6:	d00d      	beq.n	ed4 <scd_send1Byte+0x34>
    {
        // 到结尾了,换协议
        if (scd->isPrintBusyFlg)
     eb8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
     ebc:	b21b      	sxth	r3, r3
     ebe:	b15b      	cbz	r3, ed8 <scd_send1Byte+0x38>
        {
            // 确保print优先级最高，不会被chg命令覆盖
            scd->sco_protocol_num = 4;
     ec0:	2304      	movs	r3, #4
        }
        else
        {
            scd->sco_protocol_num = scd->sco_protocol_num_next;
     ec2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
        }
        ret = SCD_PROTOCOL_FCNS[scd->sco_protocol_num](scd);
     ec6:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
     eca:	4620      	mov	r0, r4
     ecc:	b21b      	sxth	r3, r3
     ece:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
     ed2:	4798      	blx	r3
    }
    return ret & 0xffu;
}
     ed4:	b2c0      	uxtb	r0, r0
     ed6:	bd38      	pop	{r3, r4, r5, pc}
            scd->sco_protocol_num = scd->sco_protocol_num_next;
     ed8:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
     edc:	e7f1      	b.n	ec2 <scd_send1Byte+0x22>
     ede:	bf00      	nop
     ee0:	00001454 	.word	0x00001454

00000ee4 <scd_init_1>:
SCD_REG_ADD(ms_cnt, uint32_t)
SCD_REG_ADD(adcRawData, uint16_t)
SCD_REG_ADD(voltAns, float)
SCD_REG_ADD(dacRawData, uint16_t)
SCD_REG_ADD(voltTar, float)
SCD_REG_END(_1)
     ee4:	4b1c      	ldr	r3, [pc, #112]	; (f58 <scd_init_1+0x74>)
     ee6:	4a1d      	ldr	r2, [pc, #116]	; (f5c <scd_init_1+0x78>)
     ee8:	f242 710f 	movw	r1, #9999	; 0x270f
     eec:	63da      	str	r2, [r3, #60]	; 0x3c
     eee:	2200      	movs	r2, #0
     ef0:	801a      	strh	r2, [r3, #0]
     ef2:	8059      	strh	r1, [r3, #2]
     ef4:	491a      	ldr	r1, [pc, #104]	; (f60 <scd_init_1+0x7c>)
     ef6:	6299      	str	r1, [r3, #40]	; 0x28
     ef8:	491a      	ldr	r1, [pc, #104]	; (f64 <scd_init_1+0x80>)
     efa:	62d9      	str	r1, [r3, #44]	; 0x2c
     efc:	491a      	ldr	r1, [pc, #104]	; (f68 <scd_init_1+0x84>)
     efe:	6319      	str	r1, [r3, #48]	; 0x30
     f00:	491a      	ldr	r1, [pc, #104]	; (f6c <scd_init_1+0x88>)
     f02:	6359      	str	r1, [r3, #52]	; 0x34
     f04:	491a      	ldr	r1, [pc, #104]	; (f70 <scd_init_1+0x8c>)
     f06:	6399      	str	r1, [r3, #56]	; 0x38
     f08:	2105      	movs	r1, #5
     f0a:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
     f0e:	2100      	movs	r1, #0
     f10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
     f14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
     f18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
     f1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
     f20:	6419      	str	r1, [r3, #64]	; 0x40
     f22:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
     f26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
     f2a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
     f2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
     f32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
     f36:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
     f3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
     f3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
     f42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
     f46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
     f4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
     f4e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
     f52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
     f56:	4770      	bx	lr
     f58:	200000b0 	.word	0x200000b0
     f5c:	00001868 	.word	0x00001868
     f60:	20000060 	.word	0x20000060
     f64:	20000038 	.word	0x20000038
     f68:	20000004 	.word	0x20000004
     f6c:	20000008 	.word	0x20000008
     f70:	20000010 	.word	0x20000010

00000f74 <Reset_Handler>:
//      linker script.
//      __etext: End of code section, i.e., begin of data sections to copy from.
//      __data_start__/__data_end__: RAM address range that data should be
//      copied to. Both must be aligned to 4 bytes boundary.

    ldr    r1, =__etext
     f74:	4907      	ldr	r1, [pc, #28]	; (f94 <Reset_Handler+0x20>)
    ldr    r2, =__data_start__
     f76:	4a08      	ldr	r2, [pc, #32]	; (f98 <Reset_Handler+0x24>)
    ldr    r3, =__data_end__
     f78:	4b08      	ldr	r3, [pc, #32]	; (f9c <Reset_Handler+0x28>)

    subs    r3, r2
     f7a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     f7c:	dd03      	ble.n	f86 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     f7e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     f80:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     f82:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     f84:	dcfb      	bgt.n	f7e <Reset_Handler+0xa>
    blt    .LC2
#endif //__STARTUP_CLEAR_BSS

#ifndef __NO_SYSTEM_INIT
    // bl    SystemInit
    ldr     r0,=SystemInit
     f86:	4806      	ldr	r0, [pc, #24]	; (fa0 <Reset_Handler+0x2c>)
    blx     r0
     f88:	4780      	blx	r0
#endif

    bl    main
     f8a:	f7ff fa85 	bl	498 <main>
    bl    exit
     f8e:	f000 f845 	bl	101c <exit>
     f92:	0000      	.short	0x0000
    ldr    r1, =__etext
     f94:	00001890 	.word	0x00001890
    ldr    r2, =__data_start__
     f98:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     f9c:	20000024 	.word	0x20000024
    ldr     r0,=SystemInit
     fa0:	00000ff5 	.word	0x00000ff5
    .size    \handler_name, . - \handler_name
    .endm

// System Exception Handlers

    def_default_handler    NMI_Handler
     fa4:	e7fe      	b.n	fa4 <Reset_Handler+0x30>
    def_default_handler    HardFault_Handler
     fa6:	e7fe      	b.n	fa6 <Reset_Handler+0x32>
    def_default_handler    MemManage_Handler
     fa8:	e7fe      	b.n	fa8 <Reset_Handler+0x34>
    def_default_handler    BusFault_Handler
     faa:	e7fe      	b.n	faa <Reset_Handler+0x36>
    def_default_handler    UsageFault_Handler
     fac:	e7fe      	b.n	fac <Reset_Handler+0x38>
    def_default_handler    SVC_Handler
     fae:	e7fe      	b.n	fae <Reset_Handler+0x3a>
    def_default_handler    DebugMon_Handler
     fb0:	e7fe      	b.n	fb0 <Reset_Handler+0x3c>
    def_default_handler    PendSV_Handler
     fb2:	e7fe      	b.n	fb2 <Reset_Handler+0x3e>
    def_default_handler    SysTick_Handler
     fb4:	e7fe      	b.n	fb4 <Reset_Handler+0x40>

// IRQ Handlers

    def_default_handler    UART0_Handler
     fb6:	e7fe      	b.n	fb6 <Reset_Handler+0x42>
    def_default_handler    USER_INT0_Handler
     fb8:	e7fe      	b.n	fb8 <Reset_Handler+0x44>
    def_default_handler    UART1_Handler
     fba:	e7fe      	b.n	fba <Reset_Handler+0x46>
    def_default_handler    USER_INT1_Handler
     fbc:	e7fe      	b.n	fbc <Reset_Handler+0x48>
    def_default_handler    USER_INT2_Handler
     fbe:	e7fe      	b.n	fbe <Reset_Handler+0x4a>
	def_default_handler    RTC_Handler
     fc0:	e7fe      	b.n	fc0 <Reset_Handler+0x4c>

00000fc2 <PORT0_COMB_Handler>:
    def_default_handler    PORT0_COMB_Handler
     fc2:	e7fe      	b.n	fc2 <PORT0_COMB_Handler>
    def_default_handler    USER_INT3_Handler
     fc4:	e7fe      	b.n	fc4 <PORT0_COMB_Handler+0x2>
    def_default_handler    TIMER0_Handler
     fc6:	e7fe      	b.n	fc6 <PORT0_COMB_Handler+0x4>
    def_default_handler    TIMER1_Handler
     fc8:	e7fe      	b.n	fc8 <PORT0_COMB_Handler+0x6>
    def_default_handler    I2C_Handler
     fca:	e7fe      	b.n	fca <PORT0_COMB_Handler+0x8>

00000fcc <UARTOVF_Handler>:
    def_default_handler    UARTOVF_Handler
     fcc:	e7fe      	b.n	fcc <UARTOVF_Handler>
    def_default_handler    USER_INT4_Handler
     fce:	e7fe      	b.n	fce <UARTOVF_Handler+0x2>
    def_default_handler    USER_INT5_Handler
     fd0:	e7fe      	b.n	fd0 <UARTOVF_Handler+0x4>

00000fd2 <Spare15_Handler>:
    def_default_handler    Spare15_Handler
     fd2:	e7fe      	b.n	fd2 <Spare15_Handler>
    def_default_handler    PORT0_0_Handler
     fd4:	e7fe      	b.n	fd4 <Spare15_Handler+0x2>
    def_default_handler    PORT0_1_Handler
     fd6:	e7fe      	b.n	fd6 <Spare15_Handler+0x4>
    def_default_handler    PORT0_2_Handler
     fd8:	e7fe      	b.n	fd8 <Spare15_Handler+0x6>
    def_default_handler    PORT0_3_Handler
     fda:	e7fe      	b.n	fda <Spare15_Handler+0x8>
    def_default_handler    PORT0_4_Handler
     fdc:	e7fe      	b.n	fdc <Spare15_Handler+0xa>
    def_default_handler    PORT0_5_Handler
     fde:	e7fe      	b.n	fde <Spare15_Handler+0xc>
    def_default_handler    PORT0_6_Handler
     fe0:	e7fe      	b.n	fe0 <Spare15_Handler+0xe>
    def_default_handler    PORT0_7_Handler
     fe2:	e7fe      	b.n	fe2 <Spare15_Handler+0x10>
    def_default_handler    PORT0_8_Handler
     fe4:	e7fe      	b.n	fe4 <Spare15_Handler+0x12>
    def_default_handler    PORT0_9_Handler
     fe6:	e7fe      	b.n	fe6 <Spare15_Handler+0x14>
    def_default_handler    PORT0_10_Handler
     fe8:	e7fe      	b.n	fe8 <Spare15_Handler+0x16>
    def_default_handler    PORT0_11_Handler
     fea:	e7fe      	b.n	fea <Spare15_Handler+0x18>
    def_default_handler    PORT0_12_Handler
     fec:	e7fe      	b.n	fec <Spare15_Handler+0x1a>
    def_default_handler    PORT0_13_Handler
     fee:	e7fe      	b.n	fee <Spare15_Handler+0x1c>
    def_default_handler    PORT0_14_Handler
     ff0:	e7fe      	b.n	ff0 <Spare15_Handler+0x1e>
    def_default_handler    PORT0_15_Handler
     ff2:	e7fe      	b.n	ff2 <Spare15_Handler+0x20>

00000ff4 <SystemInit>:
{
#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
     ff4:	4b04      	ldr	r3, [pc, #16]	; (1008 <SystemInit+0x14>)
     ff6:	4a05      	ldr	r2, [pc, #20]	; (100c <SystemInit+0x18>)
     ff8:	6013      	str	r3, [r2, #0]
  PCLK1 = SystemCoreClock;
     ffa:	4a05      	ldr	r2, [pc, #20]	; (1010 <SystemInit+0x1c>)
     ffc:	6013      	str	r3, [r2, #0]
  PCLK2 = SystemCoreClock;
     ffe:	4a05      	ldr	r2, [pc, #20]	; (1014 <SystemInit+0x20>)
    1000:	6013      	str	r3, [r2, #0]
  HCLK = SystemCoreClock;
    1002:	4a05      	ldr	r2, [pc, #20]	; (1018 <SystemInit+0x24>)
    1004:	6013      	str	r3, [r2, #0]
}
    1006:	4770      	bx	lr
    1008:	044aa200 	.word	0x044aa200
    100c:	20000020 	.word	0x20000020
    1010:	20000018 	.word	0x20000018
    1014:	2000001c 	.word	0x2000001c
    1018:	20000014 	.word	0x20000014

0000101c <exit>:
    101c:	b508      	push	{r3, lr}
    101e:	4b06      	ldr	r3, [pc, #24]	; (1038 <exit+0x1c>)
    1020:	4604      	mov	r4, r0
    1022:	b113      	cbz	r3, 102a <exit+0xe>
    1024:	2100      	movs	r1, #0
    1026:	f3af 8000 	nop.w
    102a:	4b04      	ldr	r3, [pc, #16]	; (103c <exit+0x20>)
    102c:	681b      	ldr	r3, [r3, #0]
    102e:	b103      	cbz	r3, 1032 <exit+0x16>
    1030:	4798      	blx	r3
    1032:	4620      	mov	r0, r4
    1034:	f000 f9e6 	bl	1404 <_exit>
    1038:	00000000 	.word	0x00000000
    103c:	20000118 	.word	0x20000118

00001040 <__aeabi_fmul>:
    1040:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1044:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    1048:	bf1e      	ittt	ne
    104a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    104e:	ea92 0f0c 	teqne	r2, ip
    1052:	ea93 0f0c 	teqne	r3, ip
    1056:	d06f      	beq.n	1138 <__aeabi_fmul+0xf8>
    1058:	441a      	add	r2, r3
    105a:	ea80 0c01 	eor.w	ip, r0, r1
    105e:	0240      	lsls	r0, r0, #9
    1060:	bf18      	it	ne
    1062:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    1066:	d01e      	beq.n	10a6 <__aeabi_fmul+0x66>
    1068:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    106c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    1070:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    1074:	fba0 3101 	umull	r3, r1, r0, r1
    1078:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    107c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    1080:	bf3e      	ittt	cc
    1082:	0049      	lslcc	r1, r1, #1
    1084:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    1088:	005b      	lslcc	r3, r3, #1
    108a:	ea40 0001 	orr.w	r0, r0, r1
    108e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    1092:	2afd      	cmp	r2, #253	; 0xfd
    1094:	d81d      	bhi.n	10d2 <__aeabi_fmul+0x92>
    1096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    109a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    109e:	bf08      	it	eq
    10a0:	f020 0001 	biceq.w	r0, r0, #1
    10a4:	4770      	bx	lr
    10a6:	f090 0f00 	teq	r0, #0
    10aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    10ae:	bf08      	it	eq
    10b0:	0249      	lsleq	r1, r1, #9
    10b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    10b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    10ba:	3a7f      	subs	r2, #127	; 0x7f
    10bc:	bfc2      	ittt	gt
    10be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    10c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    10c6:	4770      	bxgt	lr
    10c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    10cc:	f04f 0300 	mov.w	r3, #0
    10d0:	3a01      	subs	r2, #1
    10d2:	dc5d      	bgt.n	1190 <__aeabi_fmul+0x150>
    10d4:	f112 0f19 	cmn.w	r2, #25
    10d8:	bfdc      	itt	le
    10da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    10de:	4770      	bxle	lr
    10e0:	f1c2 0200 	rsb	r2, r2, #0
    10e4:	0041      	lsls	r1, r0, #1
    10e6:	fa21 f102 	lsr.w	r1, r1, r2
    10ea:	f1c2 0220 	rsb	r2, r2, #32
    10ee:	fa00 fc02 	lsl.w	ip, r0, r2
    10f2:	ea5f 0031 	movs.w	r0, r1, rrx
    10f6:	f140 0000 	adc.w	r0, r0, #0
    10fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    10fe:	bf08      	it	eq
    1100:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    1104:	4770      	bx	lr
    1106:	f092 0f00 	teq	r2, #0
    110a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    110e:	bf02      	ittt	eq
    1110:	0040      	lsleq	r0, r0, #1
    1112:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    1116:	3a01      	subeq	r2, #1
    1118:	d0f9      	beq.n	110e <__aeabi_fmul+0xce>
    111a:	ea40 000c 	orr.w	r0, r0, ip
    111e:	f093 0f00 	teq	r3, #0
    1122:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    1126:	bf02      	ittt	eq
    1128:	0049      	lsleq	r1, r1, #1
    112a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    112e:	3b01      	subeq	r3, #1
    1130:	d0f9      	beq.n	1126 <__aeabi_fmul+0xe6>
    1132:	ea41 010c 	orr.w	r1, r1, ip
    1136:	e78f      	b.n	1058 <__aeabi_fmul+0x18>
    1138:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    113c:	ea92 0f0c 	teq	r2, ip
    1140:	bf18      	it	ne
    1142:	ea93 0f0c 	teqne	r3, ip
    1146:	d00a      	beq.n	115e <__aeabi_fmul+0x11e>
    1148:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    114c:	bf18      	it	ne
    114e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    1152:	d1d8      	bne.n	1106 <__aeabi_fmul+0xc6>
    1154:	ea80 0001 	eor.w	r0, r0, r1
    1158:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    115c:	4770      	bx	lr
    115e:	f090 0f00 	teq	r0, #0
    1162:	bf17      	itett	ne
    1164:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    1168:	4608      	moveq	r0, r1
    116a:	f091 0f00 	teqne	r1, #0
    116e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    1172:	d014      	beq.n	119e <__aeabi_fmul+0x15e>
    1174:	ea92 0f0c 	teq	r2, ip
    1178:	d101      	bne.n	117e <__aeabi_fmul+0x13e>
    117a:	0242      	lsls	r2, r0, #9
    117c:	d10f      	bne.n	119e <__aeabi_fmul+0x15e>
    117e:	ea93 0f0c 	teq	r3, ip
    1182:	d103      	bne.n	118c <__aeabi_fmul+0x14c>
    1184:	024b      	lsls	r3, r1, #9
    1186:	bf18      	it	ne
    1188:	4608      	movne	r0, r1
    118a:	d108      	bne.n	119e <__aeabi_fmul+0x15e>
    118c:	ea80 0001 	eor.w	r0, r0, r1
    1190:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    1194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    1198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    119c:	4770      	bx	lr
    119e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    11a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    11a6:	4770      	bx	lr

000011a8 <__aeabi_frsub>:
    11a8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    11ac:	e002      	b.n	11b4 <__addsf3>
    11ae:	bf00      	nop

000011b0 <__aeabi_fsub>:
    11b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000011b4 <__addsf3>:
    11b4:	0042      	lsls	r2, r0, #1
    11b6:	bf1f      	itttt	ne
    11b8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    11bc:	ea92 0f03 	teqne	r2, r3
    11c0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    11c4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    11c8:	d06a      	beq.n	12a0 <__addsf3+0xec>
    11ca:	ea4f 6212 	mov.w	r2, r2, lsr #24
    11ce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    11d2:	bfc1      	itttt	gt
    11d4:	18d2      	addgt	r2, r2, r3
    11d6:	4041      	eorgt	r1, r0
    11d8:	4048      	eorgt	r0, r1
    11da:	4041      	eorgt	r1, r0
    11dc:	bfb8      	it	lt
    11de:	425b      	neglt	r3, r3
    11e0:	2b19      	cmp	r3, #25
    11e2:	bf88      	it	hi
    11e4:	4770      	bxhi	lr
    11e6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    11ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    11ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    11f2:	bf18      	it	ne
    11f4:	4240      	negne	r0, r0
    11f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    11fa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    11fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1202:	bf18      	it	ne
    1204:	4249      	negne	r1, r1
    1206:	ea92 0f03 	teq	r2, r3
    120a:	d03f      	beq.n	128c <__addsf3+0xd8>
    120c:	f1a2 0201 	sub.w	r2, r2, #1
    1210:	fa41 fc03 	asr.w	ip, r1, r3
    1214:	eb10 000c 	adds.w	r0, r0, ip
    1218:	f1c3 0320 	rsb	r3, r3, #32
    121c:	fa01 f103 	lsl.w	r1, r1, r3
    1220:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    1224:	d502      	bpl.n	122c <__addsf3+0x78>
    1226:	4249      	negs	r1, r1
    1228:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    122c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1230:	d313      	bcc.n	125a <__addsf3+0xa6>
    1232:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    1236:	d306      	bcc.n	1246 <__addsf3+0x92>
    1238:	0840      	lsrs	r0, r0, #1
    123a:	ea4f 0131 	mov.w	r1, r1, rrx
    123e:	f102 0201 	add.w	r2, r2, #1
    1242:	2afe      	cmp	r2, #254	; 0xfe
    1244:	d251      	bcs.n	12ea <__addsf3+0x136>
    1246:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    124a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    124e:	bf08      	it	eq
    1250:	f020 0001 	biceq.w	r0, r0, #1
    1254:	ea40 0003 	orr.w	r0, r0, r3
    1258:	4770      	bx	lr
    125a:	0049      	lsls	r1, r1, #1
    125c:	eb40 0000 	adc.w	r0, r0, r0
    1260:	3a01      	subs	r2, #1
    1262:	bf28      	it	cs
    1264:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    1268:	d2ed      	bcs.n	1246 <__addsf3+0x92>
    126a:	fab0 fc80 	clz	ip, r0
    126e:	f1ac 0c08 	sub.w	ip, ip, #8
    1272:	ebb2 020c 	subs.w	r2, r2, ip
    1276:	fa00 f00c 	lsl.w	r0, r0, ip
    127a:	bfaa      	itet	ge
    127c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    1280:	4252      	neglt	r2, r2
    1282:	4318      	orrge	r0, r3
    1284:	bfbc      	itt	lt
    1286:	40d0      	lsrlt	r0, r2
    1288:	4318      	orrlt	r0, r3
    128a:	4770      	bx	lr
    128c:	f092 0f00 	teq	r2, #0
    1290:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    1294:	bf06      	itte	eq
    1296:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    129a:	3201      	addeq	r2, #1
    129c:	3b01      	subne	r3, #1
    129e:	e7b5      	b.n	120c <__addsf3+0x58>
    12a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    12a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    12a8:	bf18      	it	ne
    12aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    12ae:	d021      	beq.n	12f4 <__addsf3+0x140>
    12b0:	ea92 0f03 	teq	r2, r3
    12b4:	d004      	beq.n	12c0 <__addsf3+0x10c>
    12b6:	f092 0f00 	teq	r2, #0
    12ba:	bf08      	it	eq
    12bc:	4608      	moveq	r0, r1
    12be:	4770      	bx	lr
    12c0:	ea90 0f01 	teq	r0, r1
    12c4:	bf1c      	itt	ne
    12c6:	2000      	movne	r0, #0
    12c8:	4770      	bxne	lr
    12ca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    12ce:	d104      	bne.n	12da <__addsf3+0x126>
    12d0:	0040      	lsls	r0, r0, #1
    12d2:	bf28      	it	cs
    12d4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    12d8:	4770      	bx	lr
    12da:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    12de:	bf3c      	itt	cc
    12e0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    12e4:	4770      	bxcc	lr
    12e6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    12ea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    12ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    12f2:	4770      	bx	lr
    12f4:	ea7f 6222 	mvns.w	r2, r2, asr #24
    12f8:	bf16      	itet	ne
    12fa:	4608      	movne	r0, r1
    12fc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    1300:	4601      	movne	r1, r0
    1302:	0242      	lsls	r2, r0, #9
    1304:	bf06      	itte	eq
    1306:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    130a:	ea90 0f01 	teqeq	r0, r1
    130e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    1312:	4770      	bx	lr

00001314 <__aeabi_ui2f>:
    1314:	f04f 0300 	mov.w	r3, #0
    1318:	e004      	b.n	1324 <__aeabi_i2f+0x8>
    131a:	bf00      	nop

0000131c <__aeabi_i2f>:
    131c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    1320:	bf48      	it	mi
    1322:	4240      	negmi	r0, r0
    1324:	ea5f 0c00 	movs.w	ip, r0
    1328:	bf08      	it	eq
    132a:	4770      	bxeq	lr
    132c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    1330:	4601      	mov	r1, r0
    1332:	f04f 0000 	mov.w	r0, #0
    1336:	e01c      	b.n	1372 <__aeabi_l2f+0x2a>

00001338 <__aeabi_ul2f>:
    1338:	ea50 0201 	orrs.w	r2, r0, r1
    133c:	bf08      	it	eq
    133e:	4770      	bxeq	lr
    1340:	f04f 0300 	mov.w	r3, #0
    1344:	e00a      	b.n	135c <__aeabi_l2f+0x14>
    1346:	bf00      	nop

00001348 <__aeabi_l2f>:
    1348:	ea50 0201 	orrs.w	r2, r0, r1
    134c:	bf08      	it	eq
    134e:	4770      	bxeq	lr
    1350:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    1354:	d502      	bpl.n	135c <__aeabi_l2f+0x14>
    1356:	4240      	negs	r0, r0
    1358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    135c:	ea5f 0c01 	movs.w	ip, r1
    1360:	bf02      	ittt	eq
    1362:	4684      	moveq	ip, r0
    1364:	4601      	moveq	r1, r0
    1366:	2000      	moveq	r0, #0
    1368:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    136c:	bf08      	it	eq
    136e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    1372:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    1376:	fabc f28c 	clz	r2, ip
    137a:	3a08      	subs	r2, #8
    137c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    1380:	db10      	blt.n	13a4 <__aeabi_l2f+0x5c>
    1382:	fa01 fc02 	lsl.w	ip, r1, r2
    1386:	4463      	add	r3, ip
    1388:	fa00 fc02 	lsl.w	ip, r0, r2
    138c:	f1c2 0220 	rsb	r2, r2, #32
    1390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    1394:	fa20 f202 	lsr.w	r2, r0, r2
    1398:	eb43 0002 	adc.w	r0, r3, r2
    139c:	bf08      	it	eq
    139e:	f020 0001 	biceq.w	r0, r0, #1
    13a2:	4770      	bx	lr
    13a4:	f102 0220 	add.w	r2, r2, #32
    13a8:	fa01 fc02 	lsl.w	ip, r1, r2
    13ac:	f1c2 0220 	rsb	r2, r2, #32
    13b0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    13b4:	fa21 f202 	lsr.w	r2, r1, r2
    13b8:	eb43 0002 	adc.w	r0, r3, r2
    13bc:	bf08      	it	eq
    13be:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    13c2:	4770      	bx	lr

000013c4 <__aeabi_f2uiz>:
    13c4:	0042      	lsls	r2, r0, #1
    13c6:	d20e      	bcs.n	13e6 <__aeabi_f2uiz+0x22>
    13c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    13cc:	d30b      	bcc.n	13e6 <__aeabi_f2uiz+0x22>
    13ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
    13d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    13d6:	d409      	bmi.n	13ec <__aeabi_f2uiz+0x28>
    13d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
    13dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    13e0:	fa23 f002 	lsr.w	r0, r3, r2
    13e4:	4770      	bx	lr
    13e6:	f04f 0000 	mov.w	r0, #0
    13ea:	4770      	bx	lr
    13ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
    13f0:	d101      	bne.n	13f6 <__aeabi_f2uiz+0x32>
    13f2:	0242      	lsls	r2, r0, #9
    13f4:	d102      	bne.n	13fc <__aeabi_f2uiz+0x38>
    13f6:	f04f 30ff 	mov.w	r0, #4294967295
    13fa:	4770      	bx	lr
    13fc:	f04f 0000 	mov.w	r0, #0
    1400:	4770      	bx	lr
    1402:	bf00      	nop

00001404 <_exit>:
    1404:	e7fe      	b.n	1404 <_exit>
	...

00001408 <_init>:
    1408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    140a:	bf00      	nop

0000140c <_fini>:
    140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    140e:	bf00      	nop
    1410:	00746573 	.word	0x00746573
    1414:	666e6f63 	.word	0x666e6f63
    1418:	67686300 	.word	0x67686300
    141c:	6d756400 	.word	0x6d756400
    1420:	61630070 	.word	0x61630070
    1424:	6c6c      	.short	0x6c6c
    1426:	00          	.byte	0x00
    1427:	00          	.byte	0x00
    1428:	007f8000 	.word	0x007f8000

0000142c <SCD_CMD_FCNS>:
    142c:	00000b89 00000b0f 00000b29 00000b3f     ........)...?...
    143c:	00000b65                                e...

00001440 <SCD_CMD_TAB>:
    1440:	00001410 00001414 00001419 0000141d     ................
    1450:	00001422                                "...

00001454 <SCD_PROTOCOL_FCNS>:
    1454:	00000525 00000651 000007a5 000007b5     %...Q...........
    1464:	000009b1                                ....

00001468 <cz_ctype>:
    1468:	00000020 00010120 00020220 00030320      ... ... ... ...
    1478:	00040420 00050520 00060620 00070720      ... ... ... ...
    1488:	00080820 00090968 000a0a28 000b0b28      ...h...(...(...
    1498:	000c0c28 000d0d28 000e0e20 000f0f20     (...(... ... ...
    14a8:	00101020 00111120 00121220 00131320      ... ... ... ...
    14b8:	00141420 00151520 00161620 00171720      ... ... ... ...
    14c8:	00181820 00191920 001a1a20 001b1b20      ... ... ... ...
    14d8:	001c1c20 001d1d20 001e1e20 001f1f20      ... ... ... ...
    14e8:	00202048 00212110 00222210 00232310     H  ..!!..""..##.
    14f8:	00242410 00252510 00262610 00272710     .$$..%%..&&..''.
    1508:	00282810 00292910 002a2a10 002b2b10     .((..))..**..++.
    1518:	002c2c10 002d2d10 002e2e10 002f2f10     .,,..--......//.
    1528:	00303004 00313104 00323204 00333304     .00..11..22..33.
    1538:	00343404 00353504 00363604 00373704     .44..55..66..77.
    1548:	00383804 00393904 003a3a10 003b3b10     .88..99..::..;;.
    1558:	003c3c10 003d3d10 003e3e10 003f3f10     .<<..==..>>..??.
    1568:	00404010 00614181 00624281 00634381     .@@..Aa..Bb..Cc.
    1578:	00644481 00654581 00664681 00674701     .Dd..Ee..Ff..Gg.
    1588:	00684801 00694901 006a4a01 006b4b01     .Hh..Ii..Jj..Kk.
    1598:	006c4c01 006d4d01 006e4e01 006f4f01     .Ll..Mm..Nn..Oo.
    15a8:	00705001 00715101 00725201 00735301     .Pp..Qq..Rr..Ss.
    15b8:	00745401 00755501 00765601 00775701     .Tt..Uu..Vv..Ww.
    15c8:	00785801 00795901 007a5a01 005b5b10     .Xx..Yy..Zz..[[.
    15d8:	005c5c10 005d5d10 005e5e10 005f5f10     .\\..]]..^^..__.
    15e8:	00606010 00614182 00624282 00634382     .``..Aa..Bb..Cc.
    15f8:	00644482 00654582 00664682 00674702     .Dd..Ee..Ff..Gg.
    1608:	00684802 00694902 006a4a02 006b4b02     .Hh..Ii..Jj..Kk.
    1618:	006c4c02 006d4d02 006e4e02 006f4f02     .Ll..Mm..Nn..Oo.
    1628:	00705002 00715102 00725202 00735302     .Pp..Qq..Rr..Ss.
    1638:	00745402 00755502 00765602 00775702     .Tt..Uu..Vv..Ww.
    1648:	00785802 00795902 007a5a02 007b7b10     .Xx..Yy..Zz..{{.
    1658:	007c7c10 007d7d10 007e7e10 007f7f20     .||..}}..~~. ...
    1668:	00808000 00818100 00828200 00838300     ................
    1678:	00848400 00858500 00868600 00878700     ................
    1688:	00888800 00898900 008a8a00 008b8b00     ................
    1698:	008c8c00 008d8d00 008e8e00 008f8f00     ................
    16a8:	00909000 00919100 00929200 00939300     ................
    16b8:	00949400 00959500 00969600 00979700     ................
    16c8:	00989800 00999900 009a9a00 009b9b00     ................
    16d8:	009c9c00 009d9d00 009e9e00 009f9f00     ................
    16e8:	00a0a000 00a1a100 00a2a200 00a3a300     ................
    16f8:	00a4a400 00a5a500 00a6a600 00a7a700     ................
    1708:	00a8a800 00a9a900 00aaaa00 00abab00     ................
    1718:	00acac00 00adad00 00aeae00 00afaf00     ................
    1728:	00b0b000 00b1b100 00b2b200 00b3b300     ................
    1738:	00b4b400 00b5b500 00b6b600 00b7b700     ................
    1748:	00b8b800 00b9b900 00baba00 00bbbb00     ................
    1758:	00bcbc00 00bdbd00 00bebe00 00bfbf00     ................
    1768:	00c0c000 00c1c100 00c2c200 00c3c300     ................
    1778:	00c4c400 00c5c500 00c6c600 00c7c700     ................
    1788:	00c8c800 00c9c900 00caca00 00cbcb00     ................
    1798:	00cccc00 00cdcd00 00cece00 00cfcf00     ................
    17a8:	00d0d000 00d1d100 00d2d200 00d3d300     ................
    17b8:	00d4d400 00d5d500 00d6d600 00d7d700     ................
    17c8:	00d8d800 00d9d900 00dada00 00dbdb00     ................
    17d8:	00dcdc00 00dddd00 00dede00 00dfdf00     ................
    17e8:	00e0e000 00e1e100 00e2e200 00e3e300     ................
    17f8:	00e4e400 00e5e500 00e6e600 00e7e700     ................
    1808:	00e8e800 00e9e900 00eaea00 00ebeb00     ................
    1818:	00ecec00 00eded00 00eeee00 00efef00     ................
    1828:	00f0f000 00f1f100 00f2f200 00f3f300     ................
    1838:	00f4f400 00f5f500 00f6f600 00f7f700     ................
    1848:	00f8f800 00f9f900 00fafa00 00fbfb00     ................
    1858:	00fcfc00 00fdfd00 00fefe00 00ffff00     ................

00001868 <tyj_unit_struct_1>:
    1868:	2000002c 00000004 20000024 00000002     ,.. ....$.. ....
    1878:	20000030 00000024 20000026 00000002     0.. $...&.. ....
    1888:	20000000 00000024                       ... $...
